service:
  tasks:
    flushoutbox:
      fixedDelay: ${EVENT_FLUSH_INTERVAL:180000}
      batchSize: ${EVENT_FLUSH_BATCHSIZE:100}

management:
  endpoints:
    web:
      exposure:
        include: env,health,metrics

spring:
  cloud:
    config:
      allowOverride: true
      overrideNone: true
      overrideSystemProperties: false
    stream:
      source: domainEvents
      kafka:
        binder:
          brokers: "${KAFKA_BROKERS:localhost:9092}"
          zkNodes: "${ZOOKEEPER_NODES:localhost:2181}"
      bindings:
        domainEvents-out-0:
          destination: stats.zabardast
          producer:
            partition-key-expression: headers['Service']
        userProfileEvents-in-0:
          group: stats-service
          destination: userprofile.zabardast
          enableDlq: true
          dlqName: userprofile.zabardast.stats.dlq
          dlqProducerProperties:
            configuration:
              value.serializer: org.springframework.kafka.support.serializer.JsonSerializer
        blogEvents-in-0:
          group: stats-service
          destination: blog.zabardast
          enableDlq: true
          dlqName: blog.zabardast.stats.dlq
          dlqProducerProperties:
            configuration:
              value.serializer: org.springframework.kafka.support.serializer.JsonSerializer
  datasource:
    platform: "postgres"
    driver-class-name: "org.postgresql.Driver"
    url: "jdbc:postgresql://${DB_ADDR:database:5432}/${DB_DATABASE:statsservice}"
    username: "${DB_USER:statsservice}"
    password: "${DB_PASSWORD:statsservice}"
    test-while-idle: "true"
    validation-query: "SELECT 1"
  jpa:
    database: "POSTGRESQL"
    generate-ddl: true
    show-sql: "true"
    properties:
      hibernate:
        dialect: "org.hibernate.dialect.PostgreSQLDialect"
        ddl-auto: create
    hibernate:
      ddl-auto: create
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: "${KEYCLOCK_URL:http://localhost:8080}/auth/realms/${KEYCLOCK_REALM:zabardast}/protocol/openid-connect/certs"

eureka:
  instance:
    prefer-ip-address: true
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: "${EUREKA_URI:http://localhost:9001/eureka}"
    tls:
      enabled: false
      key-store: classpath:keystore/server.jks
      key-alias: server
      key-store-type: JKS
      key-store-password: zabardast
      trust-store: classpath:keystore/server.jks
      trust-store-type: JKS
      trust-store-password: zabardast
