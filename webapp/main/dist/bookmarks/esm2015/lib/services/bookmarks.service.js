import { Inject, Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { catchError, map, tap } from "rxjs/operators";
import { BookmarksServiceConfigToken } from '../config/config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class BookmarksService {
    constructor(config, httpClient) {
        this.config = config;
        this.httpClient = httpClient;
        this.onChange = new Subject();
    }
    all(endpoint, pageable) {
        const page = pageable ? pageable.page : 0;
        const pageSize = (pageable && pageable.limit) ? pageable.limit : this.config.pageSize;
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}`, {
            params: {
                "page": page.toString(),
                "size": pageSize.toString(),
                "sort": "caption,asc"
            }
        })
            .pipe(map(data => {
            return data;
        }));
    }
    findMatchingCaption(endpoint, caption, pageable) {
        const query = {
            "conditions": [
                { "attribute": "caption", "operator": "like", "value": `%${caption}%` }
            ]
        };
        return this.search(endpoint, query, pageable);
    }
    search(endpoint, query, pageable) {
        const page = pageable ? pageable.page : 0;
        const pageSize = (pageable && pageable.limit) ? pageable.limit : this.config.pageSize;
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}/search`, {
            "params": {
                "q": JSON.stringify(query),
                "page": page.toString(),
                "size": pageSize.toString(),
                "sort": "caption,asc"
            }
        })
            .pipe(map(data => {
            return data;
        }));
    }
    findByUrl(endpoint, url) {
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        const query = {
            "conditions": [
                { "attribute": "url", "operator": "eq", "value": url }
            ]
        };
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}/search`, {
            "params": { "q": JSON.stringify(query) }
        })
            .pipe(map(data => {
            return data._embedded.bookmarks[0];
        }));
    }
    create(endpoint, caption, url) {
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        const boomarkRepr = {
            "url": url, "caption": caption
        };
        return this.httpClient
            .post(`${this.config.serviceBaseUrl}/${apiEndpoint}`, boomarkRepr)
            .pipe(map(data => {
            return data;
        }), tap({
            next: x => { this.onChange.next(x); }
        }));
    }
    delete(endpoint, id) {
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        return this.httpClient
            .delete(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}`)
            .pipe(catchError((error) => {
            return throwError(new Error(error.status));
        }), tap({
            next: x => { this.onChange.next(x); }
        }));
    }
}
BookmarksService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: BookmarksService, deps: [{ token: BookmarksServiceConfigToken }, { token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
BookmarksService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: BookmarksService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: BookmarksService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [BookmarksServiceConfigToken]
                }] }, { type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,