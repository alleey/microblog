import { Location } from '@angular/common';
import { OnInit, TemplateRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { PostsServiceConfig } from '../../config/config';
import { BlogPostModel, BlogPostResponseModel } from '../../models/blog-post';
import { TopicModel } from '../../models/topic';
import { PostsService } from '../../services/posts.service';
import { TopicSelectorComponent } from '../topic-selector/topic-selector.component';
import * as i0 from "@angular/core";
export declare class BlogPostEditorComponent implements OnInit {
    private config;
    private postService;
    private location;
    private activatedRoute;
    headerTemplate: TemplateRef<any> | undefined;
    paramPostId?: number;
    updateMode: boolean;
    postId?: number;
    post: BlogPostModel | null;
    successDesc: any;
    errorDesc: any;
    loading: boolean;
    form: FormGroup;
    topicSelector: TopicSelectorComponent;
    constructor(config: PostsServiceConfig, postService: PostsService, location: Location, activatedRoute: ActivatedRoute);
    ngOnInit(): void;
    get isUpdateMode(): boolean;
    get title(): import("@angular/forms").AbstractControl | null;
    get slug(): import("@angular/forms").AbstractControl | null;
    get text(): import("@angular/forms").AbstractControl | null;
    get selectedTopics(): TopicModel[];
    set blogPost(item: BlogPostModel);
    generateSlug(): void;
    updateForm(): void;
    fetchResponseHandler: {
        next: (result: BlogPostResponseModel) => void;
        error: (err: any) => boolean;
    };
    fetchPost(postId: number): void;
    updateResponseHandler: {
        next: (result: BlogPostResponseModel) => void;
        error: (err: any) => boolean;
    };
    createNewPost(): void;
    updatePost(): void;
    assignTopics(): void;
    cancel(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BlogPostEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BlogPostEditorComponent, "blog-post-editor", never, { "headerTemplate": "headerTemplate"; "paramPostId": "postId"; "updateMode": "updateMode"; }, {}, never, never>;
}
