import { Component, Inject, Input, ViewChild } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { PostsServiceConfigToken } from '../../config/config';
import { uniqueSlugValidator } from '../../validators/unique-slug-validator.directive';
import * as i0 from "@angular/core";
import * as i1 from "../../services/posts.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/router";
import * as i4 from "utils";
import * as i5 from "ngx-markdown";
import * as i6 from "../topic-selector/topic-selector.component";
import * as i7 from "../topic-editor/topic-editor.component";
import * as i8 from "@angular/forms";
import * as i9 from "auth-oidc";
function slugify(text) {
    const from = "ãàáäâẽèéëêìíïîõòóöôùúüûñç·/_,:;";
    const to = "aaaaaeeeeeiiiiooooouuuunc------";
    const newText = text.split('').map((letter, i) => letter.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i)));
    return newText
        .toString() // Cast to string
        .toLowerCase() // Convert the string to lowercase letters
        .trim() // Remove whitespace from both sides of a string
        .replace(/\s+/g, '-') // Replace spaces with -
        .replace(/&/g, '-y-') // Replace & with 'and'
        .replace(/[^\w\-]+/g, '') // Remove all non-word chars
        .replace(/\-\-+/g, '-'); // Replace multiple - with single -
}
export class BlogPostEditorComponent {
    constructor(config, postService, location, activatedRoute) {
        this.config = config;
        this.postService = postService;
        this.location = location;
        this.activatedRoute = activatedRoute;
        this.updateMode = true;
        this.post = null;
        this.successDesc = "";
        this.errorDesc = "";
        this.loading = false;
        this.fetchResponseHandler = {
            next: (result) => {
                this.blogPost = result;
                this.updateForm();
                this.loading = false;
            },
            error: (err) => {
                this.errorDesc = err.message;
                this.loading = false;
                return false;
            }
        };
        this.updateResponseHandler = {
            next: (result) => {
                this.blogPost = result;
                this.assignTopics();
            },
            error: (err) => {
                this.errorDesc = err.message;
                this.loading = false;
                return false;
            }
        };
    }
    ngOnInit() {
        var _a;
        this.form = new FormGroup({
            "title": new FormControl("", [
                Validators.required,
                Validators.maxLength(this.config.maxTitleLength),
            ]),
            "slug": new FormControl("", [
                Validators.required,
                Validators.maxLength(this.config.maxTitleLength),
                Validators.pattern(/^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/)
            ], uniqueSlugValidator(this.postService)),
            "text": new FormControl("", [
                Validators.required,
                Validators.maxLength(this.config.maxContentLength)
            ]),
        });
        (_a = this.title) === null || _a === void 0 ? void 0 : _a.valueChanges.subscribe(val => {
            var _a, _b;
            if (!((_a = this.slug) === null || _a === void 0 ? void 0 : _a.touched) || !((_b = this.slug) === null || _b === void 0 ? void 0 : _b.value)) {
                this.generateSlug();
            }
        });
        this.activatedRoute.params.subscribe(params => {
            var _a;
            this.postId = (_a = params.postId) !== null && _a !== void 0 ? _a : this.paramPostId;
            if (this.isUpdateMode)
                this.fetchPost(this.postId);
        });
    }
    get isUpdateMode() {
        return this.updateMode && this.postId !== undefined;
    }
    get title() { return this.form.get('title'); }
    get slug() { return this.form.get('slug'); }
    get text() { return this.form.get('text'); }
    get selectedTopics() {
        var _a;
        return ((_a = this.post) === null || _a === void 0 ? void 0 : _a.topics) || [];
    }
    set blogPost(item) {
        var _a;
        this.post = this.updateMode ? item : null;
        this.postId = this.updateMode ? (_a = this.post) === null || _a === void 0 ? void 0 : _a.id : undefined;
        console.info("Got post id: " + this.postId);
    }
    generateSlug() {
        var _a, _b;
        (_a = this.slug) === null || _a === void 0 ? void 0 : _a.setValue(slugify((_b = this.title) === null || _b === void 0 ? void 0 : _b.value));
    }
    updateForm() {
        var _a, _b, _c;
        this.title.setValue((_a = this.post) === null || _a === void 0 ? void 0 : _a.title);
        this.slug.setValue((_b = this.post) === null || _b === void 0 ? void 0 : _b.slug);
        this.text.setValue((_c = this.post) === null || _c === void 0 ? void 0 : _c.text);
    }
    fetchPost(postId) {
        this.loading = true;
        this.postService
            .one("posts", postId)
            .subscribe(this.fetchResponseHandler);
    }
    createNewPost() {
        var _a, _b, _c;
        this.postService
            .create("posts", (_a = this.slug) === null || _a === void 0 ? void 0 : _a.value, (_b = this.title) === null || _b === void 0 ? void 0 : _b.value, (_c = this.text) === null || _c === void 0 ? void 0 : _c.value)
            .subscribe(this.updateResponseHandler);
    }
    updatePost() {
        var _a, _b, _c;
        this.postService
            .update("posts", this.postId, (_a = this.slug) === null || _a === void 0 ? void 0 : _a.value, (_b = this.title) === null || _b === void 0 ? void 0 : _b.value, (_c = this.text) === null || _c === void 0 ? void 0 : _c.value)
            .subscribe(this.updateResponseHandler);
    }
    assignTopics() {
        const selectedTopics = this.topicSelector.selectedTopics.map(i => i.id);
        console.info(selectedTopics);
        this.postService
            .assignTopics("posts", this.postId, selectedTopics)
            .subscribe({
            next: () => {
                this.updateForm();
                this.successDesc = "Post updated successfully!";
                this.loading = false;
            },
            error: (err) => {
                this.errorDesc = err.message;
                this.loading = false;
                return false;
            }
        });
    }
    cancel() {
        this.location.back();
    }
}
BlogPostEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: BlogPostEditorComponent, deps: [{ token: PostsServiceConfigToken }, { token: i1.PostsService }, { token: i2.Location }, { token: i3.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
BlogPostEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.4", type: BlogPostEditorComponent, selector: "blog-post-editor", inputs: { headerTemplate: "headerTemplate", paramPostId: ["postId", "paramPostId"], updateMode: "updateMode" }, viewQueries: [{ propertyName: "topicSelector", first: true, predicate: ["topicSelector"], descendants: true }], ngImport: i0, template: "<div *ngIf=\"loading; else contents\">\n    <utils-loader></utils-loader>\n</div>\n\n<ng-template #defaultTitleTemplate let-item>\n    <div class=\"d-flex justify-content-between\">\n        <div>\n            <h5>WRITE A POST</h5>\n        </div>\n        <div><a class=\"btn btn-success\" role=\"button\" (click)=\"cancel()\">Cancel</a></div>\n    </div>\n    <hr class=\"my-4\">\n</ng-template>\n\n<ng-template #contents>\n    <ng-container \n        [ngTemplateOutlet]=\"headerTemplate || defaultTitleTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: this }\">\n    </ng-container>\n    <utils-alert *ngIf=\"successDesc\" [dismissable]=\"false\" [minimal]=\"false\">\n        <p>{{ successDesc }}</p>\n    </utils-alert>\n    <utils-alert *ngIf=\"errorDesc; else editor\" [dismissable]=\"false\" [minimal]=\"false\">\n        <p>An error occurred accessing the post: {{ errorDesc }}</p>\n    </utils-alert>\n</ng-template>\n\n<ng-template #editor>\n    <form [formGroup]=\"form\" novalidate onSubmit=\"return false;\">\n        <div class=\"row\">\n            <div class=\"mb-3 col-sm-12\">\n                <label for=\"title\" class=\"form-label\">Title</label>\n                <input type=\"text\" class=\"form-control\" id=\"title\" \n                    placeholder=\"Title of your post ... \"\n                    formControlName=\"title\" required>\n\n                <div *ngIf=\"title?.invalid && (title?.dirty || title?.touched)\">\n                    <utils-alert *ngIf=\"title?.errors?.required\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Title is required.\n                    </utils-alert>\n                    <utils-alert *ngIf=\"title?.errors?.maxLength\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Title length exceeds limit.\n                    </utils-alert>\n                </div>\n\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"mb-3 col-sm-12\">\n                <label for=\"slug\" class=\"form-label\">Slug</label>\n                <div class=\"d-flex justify-content-between\">\n                    <input type=\"text\" class=\"form-control\" id=\"slug\" \n                        placeholder=\"Slug goes here ... e.g. this-is-a-valid-slug\"\n                        formControlName=\"slug\" required>\n                    <input class=\"btn btn-primary ml-1\" type=\"button\" [disabled]=\"loading\" value=\"Auto Generate\" (click)=\"generateSlug()\">\n                </div>\n                <div *ngIf=\"slug?.invalid && (slug?.dirty || slug?.touched)\">\n                    <utils-alert *ngIf=\"slug?.errors?.required\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Slug is required.\n                    </utils-alert>\n                    <utils-alert *ngIf=\"slug?.errors?.maxLength\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Slug length exceeds limit.\n                    </utils-alert>\n                    <utils-alert *ngIf=\"slug?.errors?.pattern\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Only clean url like expressions are allowed in slugs e.g. this-is-a-valid-slug\n                    </utils-alert>\n                    <utils-alert *ngIf=\"slug?.errors?.slugExists\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Slug is already taken!\n                    </utils-alert>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"mb-3 col-sm-6\">\n                <label for=\"text\" class=\"form-label\">Write your story here:</label>\n                <textarea class=\"form-control\" id=\"postText\" rows=\"3\" formControlName=\"text\" required></textarea>\n\n                <div *ngIf=\"text?.invalid && (text?.dirty || text?.touched)\">\n                    <utils-alert *ngIf=\"text?.errors?.pattern\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Sorry, cannot leave this empty!\n                    </utils-alert>\n                    <utils-alert *ngIf=\"text?.errors?.maxLength\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Conent length exceeds limit.\n                    </utils-alert>\n                </div>\n\n            </div>\n            <div class=\"mb-3 col-sm-6\">\n                <label class=\"form-label\">Preview</label>\n                <markdown class=\"variable-binding\" [data]=\"text?.value\"></markdown>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"mb-3 col-sm-12\">\n                <topic-selector #topicSelector \n                    [initialTopics]=\"selectedTopics\"\n                    [noContentsTemplate]=\"topicsNotFoundTemplate\">\n                </topic-selector>\n            </div>\n        </div>\n        <div class=\"mb-3\" *ngIf=\"!isUpdateMode\">\n            <input class=\"btn btn-primary\" type=\"button\" [disabled]=\"loading || !form.valid\" value=\"Post\" (click)=\"createNewPost()\">\n        </div>\n        <div class=\"mb-3\" *ngIf=\"isUpdateMode\">\n            <input class=\"btn btn-primary\" type=\"button\" [disabled]=\"loading || !form.valid\" value=\"Update\" (click)=\"updatePost()\">\n        </div>\n    </form>\n</ng-template>\n\n<ng-template #topicsNotFoundTemplate let-item>\n    No topic found!\n    <topic-editor *authRequireRole=\"'admin'\"></topic-editor>\n</ng-template>\n", styles: [""], components: [{ type: i4.LoaderComponent, selector: "utils-loader", inputs: ["controlTemplate"] }, { type: i4.AlertComponent, selector: "utils-alert", inputs: ["minimal", "dismissable", "title", "kind", "controlTemplate"], outputs: ["onClosed"] }, { type: i5.MarkdownComponent, selector: "markdown, [markdown]", inputs: ["data", "src", "emoji", "katex", "katexOptions", "lineHighlight", "line", "lineOffset", "lineNumbers", "start"], outputs: ["error", "load", "ready"] }, { type: i6.TopicSelectorComponent, selector: "topic-selector", inputs: ["maxTopics", "initialTopics", "itemTemplate", "noContentsTemplate"] }, { type: i7.TopicEditorComponent, selector: "topic-editor", inputs: ["headerTemplate", "topicId", "updateMode"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i8.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i8.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i9.RequireRoleDirective, selector: "[authRequireRole]", inputs: ["authRequireRole", "authRequireRoleElse", "authRequireRoleThen"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: BlogPostEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'blog-post-editor',
                    templateUrl: './blog-post-editor.component.html',
                    styleUrls: ['./blog-post-editor.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PostsServiceConfigToken]
                }] }, { type: i1.PostsService }, { type: i2.Location }, { type: i3.ActivatedRoute }]; }, propDecorators: { headerTemplate: [{
                type: Input
            }], paramPostId: [{
                type: Input,
                args: ["postId"]
            }], updateMode: [{
                type: Input
            }], topicSelector: [{
                type: ViewChild,
                args: ['topicSelector']
            }] } });
//# sourceMappingURL=data:application/json;base64,