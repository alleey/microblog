import { Inject, Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';
import { TopicsServiceConfigToken } from '../config/config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class TopicsService {
    constructor(config, httpClient) {
        this.config = config;
        this.httpClient = httpClient;
        this.onChange = new Subject();
    }
    all(endpoint, pageable) {
        const page = pageable ? pageable.page : 0;
        const pageSize = (pageable && pageable.limit) ? pageable.limit : this.config.pageSize;
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}`, {
            params: {
                "page": page.toString(),
                "size": pageSize.toString(),
                "sort": "caption,asc"
            }
        })
            .pipe(map(data => {
            return data;
        }));
    }
    one(endpoint, id) {
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}`)
            .pipe(map(data => {
            return data;
        }));
    }
    findByCaption(endpoint, caption, pageable) {
        const query = {
            "conditions": [
                { "attribute": "caption", "operator": "eq", "value": `%${caption}%` }
            ]
        };
        return this.search(endpoint, query, pageable);
    }
    findMatchingCaption(endpoint, caption, pageable) {
        const query = {
            "conditions": [
                { "attribute": "caption", "operator": "like", "value": `%${caption}%` }
            ]
        };
        return this.search(endpoint, query, pageable);
    }
    search(endpoint, query, pageable) {
        const page = pageable ? pageable.page : 0;
        const pageSize = (pageable && pageable.limit) ? pageable.limit : this.config.pageSize;
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}/search`, {
            "params": {
                "q": JSON.stringify(query),
                "page": page.toString(),
                "size": pageSize.toString(),
                "sort": "caption,asc"
            }
        })
            .pipe(map(data => {
            return data;
        }));
    }
    create(endpoint, caption) {
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        const topicRepr = {
            "caption": caption
        };
        return this.httpClient
            .post(`${this.config.serviceBaseUrl}/${apiEndpoint}`, topicRepr)
            .pipe(map(data => {
            return data;
        }), tap({
            next: x => { this.onChange.next(x); }
        }));
    }
    update(endpoint, id, caption) {
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        const topicRepr = {
            "caption": caption
        };
        return this.httpClient
            .put(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}`, topicRepr)
            .pipe(map(data => {
            return data;
        }), tap({
            next: x => { this.onChange.next(x); }
        }));
    }
    delete(endpoint, id) {
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        return this.httpClient
            .delete(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}`)
            .pipe(catchError((error) => {
            return throwError(new Error(error.status));
        }), tap({
            next: x => { this.onChange.next(x); }
        }));
    }
}
TopicsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: TopicsService, deps: [{ token: TopicsServiceConfigToken }, { token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
TopicsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: TopicsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: TopicsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TopicsServiceConfigToken]
                }] }, { type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,