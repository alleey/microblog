import { Inject, Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { catchError, map, tap } from "rxjs/operators";
import { PostsServiceConfigToken } from '../config/config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class PostsService {
    constructor(config, httpClient) {
        this.config = config;
        this.httpClient = httpClient;
        this.onChange = new Subject();
    }
    all(endpoint, pageable) {
        const page = pageable ? pageable.page : 0;
        const pageSize = (pageable && pageable.limit) ? pageable.limit : this.config.pageSize;
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}`, {
            params: {
                "page": page.toString(),
                "size": pageSize.toString(),
                "sort": "createdOn,desc"
            }
        })
            .pipe(map(data => {
            return data;
        }));
    }
    one(endpoint, id) {
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}`)
            .pipe(map(data => {
            return data;
        }));
    }
    findBySlug(endpoint, slug) {
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        const query = {
            "conditions": [
                { "attribute": "slug", "operator": "eq", "value": slug }
            ]
        };
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}/search`, {
            "params": { "q": JSON.stringify(query) }
        })
            .pipe(map(data => {
            return data;
        }));
    }
    create(endpoint, slug, title, text) {
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        let postRepr = {
            "slug": slug, "title": title, "text": text
        };
        return this.httpClient
            .post(`${this.config.serviceBaseUrl}/${apiEndpoint}`, postRepr)
            .pipe(map(data => {
            return data;
        }), tap({
            next: x => { this.onChange.next(x); }
        }));
    }
    update(endpoint, id, slug, title, text) {
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        let postRepr = {
            "slug": slug, "title": title, "text": text
        };
        return this.httpClient
            .put(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}`, postRepr)
            .pipe(map(data => {
            return data;
        }), tap({
            next: x => { this.onChange.next(x); }
        }));
    }
    delete(endpoint, id) {
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        return this.httpClient
            .delete(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}`)
            .pipe(catchError((error) => {
            return throwError(new Error(error.status));
        }), tap({
            next: x => { this.onChange.next(x); }
        }));
    }
    assignTopics(endpoint, id, topicIds) {
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        return this.httpClient
            .put(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}/topics`, topicIds)
            .pipe(catchError((error) => {
            return throwError(new Error(error.status));
        }));
    }
}
PostsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: PostsService, deps: [{ token: PostsServiceConfigToken }, { token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
PostsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: PostsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: PostsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PostsServiceConfigToken]
                }] }, { type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,