{"version":3,"file":"blog.js","sources":["../../../projects/blog/src/lib/config/config.ts","../../../projects/blog/src/lib/config/public-api.ts","../../../projects/blog/src/lib/models/public-api.ts","../../../projects/blog/src/lib/services/posts.service.ts","../../../projects/blog/src/lib/components/topic-list-view/topic-list-view.component.ts","../../../projects/blog/src/lib/components/topic-list-view/topic-list-view.component.html","../../../projects/blog/src/lib/services/comments.service.ts","../../../projects/blog/src/lib/components/comment-editor/comment-editor.component.ts","../../../projects/blog/src/lib/components/comment-editor/comment-editor.component.html","../../../projects/blog/src/lib/components/comment-list-view/comment-list-view.component.ts","../../../projects/blog/src/lib/components/comment-list-view/comment-list-view.component.html","../../../projects/blog/src/lib/components/comment-list/comment-list.component.ts","../../../projects/blog/src/lib/components/comment-list/comment-list.component.html","../../../projects/blog/src/lib/components/blog-post-view/blog-post-view.component.ts","../../../projects/blog/src/lib/components/blog-post-view/blog-post-view.component.html","../../../projects/blog/src/lib/components/blog-post/blog-post.component.ts","../../../projects/blog/src/lib/components/blog-post/blog-post.component.html","../../../projects/blog/src/lib/validators/unique-slug-validator.directive.ts","../../../projects/blog/src/lib/services/topics.service.ts","../../../projects/blog/src/lib/components/topic-list/topic-list.component.ts","../../../projects/blog/src/lib/components/topic-list/topic-list.component.html","../../../projects/blog/src/lib/components/topic-selector/topic-selector.component.ts","../../../projects/blog/src/lib/components/topic-selector/topic-selector.component.html","../../../projects/blog/src/lib/components/topic-editor/topic-editor.component.ts","../../../projects/blog/src/lib/components/topic-editor/topic-editor.component.html","../../../projects/blog/src/lib/components/blog-post-editor/blog-post-editor.component.ts","../../../projects/blog/src/lib/components/blog-post-editor/blog-post-editor.component.html","../../../projects/blog/src/lib/components/blog-post-list-view/blog-post-list-view.component.ts","../../../projects/blog/src/lib/components/blog-post-list-view/blog-post-list-view.component.html","../../../projects/blog/src/lib/components/blog-post-list/blog-post-list.component.ts","../../../projects/blog/src/lib/components/blog-post-list/blog-post-list.component.html","../../../projects/blog/src/lib/components/public-api.ts","../../../projects/blog/src/lib/services/public-api.ts","../../../projects/blog/src/lib/blog.module.ts","../../../projects/blog/src/public-api.ts","../../../projects/blog/src/blog.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface PostsServiceConfig {\n  serviceBaseUrl: string,\n  defaultEndpoint: string,\n  pageSize: number,\n  maxTitleLength: number,\n  maxContentLength: number,\n}\nexport const PostsServiceConfigToken = new InjectionToken<PostsServiceConfig>(\"PostsServiceConfig\");\n\nexport interface CommentsServiceConfig {\n  serviceBaseUrl: string,\n  defaultEndpoint: string,\n  pageSize: number,\n  maxContentLength: number,\n};\nexport const CommentsServiceConfigToken = new InjectionToken<CommentsServiceConfig>(\"CommentsServiceConfig\");\n\nexport interface TopicsServiceConfig {\n  serviceBaseUrl: string,\n  defaultEndpoint: string,\n  pageSize: number,\n};\nexport const TopicsServiceConfigToken = new InjectionToken<TopicsServiceConfig>(\"TopicsServiceConfig\");\n\nexport interface BlogModuleConfig {\n  posts: PostsServiceConfig;\n  comments: CommentsServiceConfig;\n  topics: TopicsServiceConfig;\n}\nexport const BlogModuleConfigToken = new InjectionToken<BlogModuleConfig>(\"BlogModuleConfig\");\n","/*\n * Public API Surface of bookmarks\n */\n\nexport * from './config';\n","/*\n * Public API Surface of blog\n */\n\nexport * from './blog-post';\nexport * from './topic';\nexport * from './comment';\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Pageable } from 'utils';\nimport { Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, map, tap } from \"rxjs/operators\";\nimport { BlogPostResponseModel, BlogPostListResponseModel } from '../models/blog-post';\nimport { PostsServiceConfig, PostsServiceConfigToken } from '../config/config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostsService {\n\n  public onChange: Subject<any> = new Subject<any>();\n\n  constructor(@Inject(PostsServiceConfigToken) private config: PostsServiceConfig, private httpClient: HttpClient) \n  { }\n\n  public all(endpoint: string, pageable?: Pageable): Observable<BlogPostListResponseModel> {\n\n    const page: number = pageable ? pageable.page : 0;\n    const pageSize: number = (pageable && pageable.limit) ? pageable.limit : this.config.pageSize;\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n\n    return this.httpClient\n              .get<BlogPostListResponseModel>(`${this.config.serviceBaseUrl}/${apiEndpoint}`, {\n                params: {\n                  \"page\": page.toString(),\n                  \"size\": pageSize.toString(),\n                  \"sort\": \"createdOn,desc\"\n                }\n              })\n              .pipe(\n                map(data => {\n                  return data as BlogPostListResponseModel;\n                })\n              );\n  }\n\n  public one(endpoint: string, id: number): Observable<BlogPostResponseModel> {\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n    return this.httpClient\n              .get<BlogPostResponseModel>(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}`)\n              .pipe(\n                map(data => {\n                  return data as BlogPostResponseModel;\n                })\n              );\n  }\n\n  public findBySlug(endpoint: string, slug: string): Observable<BlogPostListResponseModel> {\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n    const query = {\n      \"conditions\": [\n        { \"attribute\": \"slug\", \"operator\": \"eq\", \"value\": slug }\n      ]\n    };\n    return this.httpClient\n            .get<BlogPostListResponseModel>(`${this.config.serviceBaseUrl}/${apiEndpoint}/search`, \n            {\n              \"params\": { \"q\": JSON.stringify(query) }\n            })\n            .pipe(\n              map(data => {\n                return data as BlogPostListResponseModel;\n              })\n            );\n  }\n\n  public create(endpoint: string, slug: string, title: string, text: string): Observable<BlogPostResponseModel> {\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n    let postRepr = {\n      \"slug\": slug, \"title\": title, \"text\": text\n    };\n    return this.httpClient\n            .post<BlogPostResponseModel>(`${this.config.serviceBaseUrl}/${apiEndpoint}`, postRepr)\n            .pipe(\n              map(data => {\n                return data as BlogPostResponseModel;\n              }),\n              tap({\n                next: x => { this.onChange.next(x); }\n              })\n            );\n  }\n\n  public update(endpoint: string, id: number, slug: string, title: string, text: string): Observable<BlogPostResponseModel> {\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n    let postRepr = {\n      \"slug\": slug, \"title\": title, \"text\": text\n    };\n    return this.httpClient\n            .put<BlogPostResponseModel>(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}`, postRepr)\n            .pipe(\n              map(data => {\n                return data as BlogPostResponseModel;\n              }),\n              tap({\n                next: x => { this.onChange.next(x); }\n              })\n            );\n  }\n\n  public delete(endpoint: string, id: number): Observable<void> {\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n    return this.httpClient\n            .delete<void>(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}`)\n            .pipe(\n              catchError((error: any) => {\n                return throwError(new Error(error.status));\n              }),\n              tap({\n                next: x => { this.onChange.next(x); }\n              })\n            );\n  }\n\n\n  public assignTopics(endpoint: string, id: number, topicIds: number[]): Observable<void> {\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n    return this.httpClient\n            .put<void>(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}/topics`, topicIds)\n            .pipe(\n              catchError((error: any) => {\n                return throwError(new Error(error.status));\n              })\n            );\n  }\n}\n","import { Component, Input, OnInit, Output, EventEmitter, ContentChild, TemplateRef } from '@angular/core';\nimport { ViewEvent } from 'utils';\nimport { TopicModel } from '../../models/topic';\n\nexport type TopicListViewEvent = ViewEvent<TopicModel>;\n\n@Component({\n  selector: 'blog-topic-list-view',\n  templateUrl: './topic-list-view.component.html',\n  styleUrls: ['./topic-list-view.component.scss']\n})\nexport class TopicListViewComponent implements OnInit {\n\n  @Input() topics!: TopicModel[];\n\n  @Input() itemTemplate: TemplateRef<any> | undefined;\n  @Input() noContentsTemplate: TemplateRef<any> | undefined;\n\n  @Output()\n  onSelectItem = new EventEmitter<TopicListViewEvent>();\n\n  ngOnInit(): void {}\n\n  selectItem(item: TopicModel, opcode: string): void {\n    this.onSelectItem.emit({\n      opcode: opcode,\n      item: item\n    });\n  }\n}\n","<ng-container *ngIf=\"topics\">\n    <ng-container *ngFor=\"let x of topics; index as i\">\n        <ng-container \n            [ngTemplateOutlet]=\"itemTemplate || defaultItemTemplate\"\n            [ngTemplateOutletContext]=\"{ $implicit: x, index: i, list: this }\">\n        </ng-container>\n    </ng-container>\n</ng-container>\n<ng-container *ngIf=\"!topics\">\n    <ng-container \n        [ngTemplateOutlet]=\"noContentsTemplate || defaultNoContentsTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: this }\">\n    </ng-container>\n</ng-container>\n\n<ng-template #defaultItemTemplate let-item let-parent=\"list\">\n    <a class=\"btn btn-danger m-1\" role=\"button\" (click)=\"parent.selectItem(item, 'select')\">{{item.caption}}</a>\n</ng-template>\n\n<ng-template #defaultNoContentsTemplate let-item>\n    No topic found!\n</ng-template>","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Pageable } from 'utils';\nimport { Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, map, tap } from \"rxjs/operators\";\nimport { CommentResponseModel, CommentListResponseModel } from '../models/comment';\nimport { CommentsServiceConfig, CommentsServiceConfigToken } from '../config/config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentsService {\n\n  public onChange: Subject<any> = new Subject<any>();\n\n  constructor(@Inject(CommentsServiceConfigToken) private config: CommentsServiceConfig, private httpClient: HttpClient) \n  { }\n\n  public all(endpoint: string, postId: number, pageable?: Pageable): Observable<CommentListResponseModel> {\n\n    const page: number = pageable ? pageable.page : 0;\n    const pageSize: number = (pageable && pageable.limit) ? pageable.limit : this.config.pageSize;\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n\n    return this.httpClient\n              .get<CommentListResponseModel>(`${this.config.serviceBaseUrl}/${apiEndpoint}/${postId}/comments`, {\n                params: {\n                  \"page\": page.toString(),\n                  \"size\": pageSize.toString(),\n                  \"sort\": \"createdOn,desc\"\n                }\n              })\n              .pipe(\n                map(data => {\n                  return data as CommentListResponseModel;\n                })\n              );\n  }\n\n  public one(endpoint: string, postId: number, id: number): Observable<CommentResponseModel> {\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n    return this.httpClient\n              .get<CommentResponseModel>(`${this.config.serviceBaseUrl}/${apiEndpoint}/${postId}/comments/${id}`)\n              .pipe(\n                map(data => {\n                  return data as CommentResponseModel;\n                })\n              );\n  }\n\n  public create(endpoint: string, postId: number, text: string): Observable<CommentResponseModel> {\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n    let commentRepr = {\n      \"text\": text\n    };\n    return this.httpClient\n            .post<CommentResponseModel>(`${this.config.serviceBaseUrl}/${apiEndpoint}/${postId}/comments`, commentRepr)\n            .pipe(\n              map(data => {\n                return data as CommentResponseModel;\n              }),\n              tap({\n                next: x => { this.onChange.next(x); }\n              })\n            );\n  }\n\n  public update(endpoint: string, postId: number, id: number, text: string): Observable<CommentResponseModel> {\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n    let commentRepr = {\n      \"text\": text\n    };\n    return this.httpClient\n            .put<CommentResponseModel>(`${this.config.serviceBaseUrl}/${apiEndpoint}/${postId}/comments/${id}`, commentRepr)\n            .pipe(\n              map(data => {\n                return data as CommentResponseModel;\n              }),\n              tap({\n                next: x => { this.onChange.next(x); }\n              })\n            );\n  }\n\n  public delete(endpoint: string, postId: number, id: number): Observable<void> {\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n    return this.httpClient\n            .delete<void>(`${this.config.serviceBaseUrl}/${apiEndpoint}/${postId}/comments/${id}`)\n            .pipe(\n              catchError((error: any) => {\n                return throwError(new Error(error.status));\n              }),\n              tap({\n                next: x => { this.onChange.next(x); }\n              })\n            );\n  }\n}\n","import { Location } from '@angular/common';\nimport { Component, Inject, Input, OnInit, TemplateRef } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CommentsServiceConfig, CommentsServiceConfigToken } from '../../config/config';\nimport { CommentModel, CommentResponseModel } from '../../models/comment';\nimport { CommentsService } from '../../services/comments.service';\n\n@Component({\n  selector: 'comment-editor',\n  templateUrl: './comment-editor.component.html',\n  styleUrls: ['./comment-editor.component.css']\n})\nexport class CommentEditorComponent implements OnInit {\n\n  @Input() headerTemplate: TemplateRef<any> | undefined;\n  @Input(\"postId\") paramPostId?: number;\n  @Input(\"commentId\") paramCommentId?: string;\n  @Input() updateMode: boolean = true;\n\n  postId?: number;\n  commentId?: number;\n  comment : CommentModel|null = null;\n\n  successDesc: any = \"\";\n  errorDesc: any = \"\";\n  loading: boolean = false;\n\n  form!: FormGroup;\n\n  constructor(\n    @Inject(CommentsServiceConfigToken) private config: CommentsServiceConfig,\n    private commentsService: CommentsService, \n    private location: Location,\n    private activatedRoute: ActivatedRoute) {}\n\n  ngOnInit(): void {\n\n    this.form = new FormGroup(\n    {\n      \"text\": new FormControl(\"\", [\n          Validators.required,\n          Validators.maxLength(this.config.maxContentLength)\n      ]),\n    });\n\n    this.activatedRoute.params.subscribe(params => {\n      this.postId = params.postId ?? this.paramPostId;\n      this.commentId = params.commentId ?? this.paramCommentId;\n      if(this.isUpdateMode)\n        this.fetchComment(this.commentId!);\n    });\n  }\n\n  get isUpdateMode(): boolean { \n    return this.updateMode && this.commentId !== undefined; \n  }\n\n  get text() { return this.form.get('text'); }\n\n  set blogComment(item: CommentModel) {\n    this.comment = this.updateMode ? item : null;\n    this.commentId = this.updateMode ? this.comment?.id : undefined;\n    console.info(\"Got comment id: \" + this.commentId!);\n  }\n\n  updateForm(): void {\n    this.text!.setValue (this.comment?.text);\n  }\n\n  fetchResponseHandler = {\n    next: (result: CommentResponseModel) => {\n      this.blogComment = result;\n      this.updateForm();\n      this.loading = false;\n    },\n    error: (err: any) => {\n      this.errorDesc = err.message;\n      this.loading = false;\n      return false;\n    }\n  };\n\n  fetchComment(commentId: number): void {\n    this.loading = true;\n    this.commentsService\n      .one(\"\", this.postId!, commentId)\n      .subscribe(this.fetchResponseHandler);\n  }      \n\n  createNewComment(): void {\n    this.commentsService\n      .create(\"\", this.postId!, this.text?.value)\n      .subscribe(this.fetchResponseHandler);\n  }\n\n  updateComment(): void {\n    this.commentsService\n      .update(\"\", this.postId!, this.commentId!, this.text?.value)\n      .subscribe(this.fetchResponseHandler);\n  }\n\n  cancel(): void {\n    this.location.back();\n  }\n}\n","<div *ngIf=\"loading; else contents\">\n    <utils-loader></utils-loader>\n</div>\n\n<ng-template #defaultTitleTemplate let-item>\n    <div class=\"d-flex justify-content-between\">\n        <div>\n            <h5>POST A COMMENT</h5>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #contents>\n    <ng-container \n        [ngTemplateOutlet]=\"headerTemplate || defaultTitleTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: this }\">\n    </ng-container>\n    <utils-alert *ngIf=\"successDesc\" [dismissable]=\"false\" [minimal]=\"false\">\n        <p>{{ successDesc }}</p>\n    </utils-alert>\n    <utils-alert *ngIf=\"errorDesc; else editor\" [dismissable]=\"false\" [minimal]=\"false\">\n        <p>An error occurred accessing the post: {{ errorDesc }}</p>\n    </utils-alert>\n</ng-template>\n\n<ng-template #editor>\n    <form [formGroup]=\"form\" novalidate onSubmit=\"return false;\">\n        <div class=\"row\">\n            <div class=\"mb-3 col-sm-12\">\n                <textarea class=\"form-control\" id=\"postText\" rows=\"3\" formControlName=\"text\" required></textarea>\n                <div *ngIf=\"text?.invalid && (text?.dirty || text?.touched)\">\n                    <utils-alert *ngIf=\"text?.errors?.pattern\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Sorry, cannot leave this empty!\n                    </utils-alert>\n                </div>\n            </div>\n        </div>\n        <div class=\"mb-3\" *ngIf=\"!isUpdateMode\">\n            <input class=\"btn btn-primary\" type=\"button\" [disabled]=\"loading || !form.valid\" value=\"Post\" (click)=\"createNewComment()\">\n        </div>\n        <div class=\"mb-3\" *ngIf=\"isUpdateMode\">\n            <input class=\"btn btn-primary\" type=\"button\" [disabled]=\"loading || !form.valid\" value=\"Update\" (click)=\"updateComment()\">\n        </div>\n    </form>\n</ng-template>\n","import { Component, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\nimport { CommentModel } from '../../models/comment';\n\n@Component({\n  selector: 'comment-list-view',\n  templateUrl: './comment-list-view.component.html',\n  styleUrls: ['./comment-list-view.component.css']\n})\nexport class CommentListViewComponent implements OnInit {\n\n  @Input() comments!: CommentModel[];\n\n  @Input() itemTemplate: TemplateRef<any> | undefined;\n  @Input() noContentsTemplate: TemplateRef<any> | undefined;\n\n  @Output() onSelectItem = new EventEmitter<CommentModel>();\n\n  ngOnInit(): void {}\n\n  selectItem(entity: CommentModel): void {\n    this.onSelectItem.emit(entity);\n  }\n}\n","<ng-container *ngIf=\"comments\">\n    <div *ngFor=\"let x of comments\" class=\"bg-light\">\n        <ng-container \n            [ngTemplateOutlet]=\"itemTemplate || defaultItemTemplate\"\n            [ngTemplateOutletContext]=\"{ $implicit: x, list: this }\">\n        </ng-container>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"!comments\">\n    <ng-container \n        [ngTemplateOutlet]=\"noContentsTemplate || defaultNoContentsTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: this }\">\n    </ng-container>\n</ng-container>\n\n<ng-template #defaultItemTemplate let-item>\n    <div class=\"created\"> {{item.owner}} commented on {{ item.createdOn | prettyDate }}.</div>\n    <p class=\"posttext \">\n      {{item.text}} \n    </p>\n    <hr class=\"my-4\">\n</ng-template>\n\n<ng-template #defaultNoContentsTemplate let-item>\n    No comments yet!\n</ng-template>\n","import { Component, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { Pageable, PageModel } from 'utils';\nimport { CommentModel, CommentListResponseModel } from '../../models/comment';\nimport { CommentsService } from '../../services/comments.service';\n\n@Component({\n  selector: 'blog-comment-list',\n  templateUrl: './comment-list.component.html',\n  styleUrls: ['./comment-list.component.css']\n})\nexport class CommentListComponent implements OnInit, OnDestroy {\n\n  @Input() postId!: number;\n\n  @Input() noContentsTemplate: TemplateRef<any> | undefined;\n  @Input() itemTemplate: TemplateRef<any> | undefined;\n  @Input() headerTemplate: TemplateRef<any> | undefined;\n  @Input() footerTemplate: TemplateRef<any> | undefined;\n\n  state: any;\n\n  pageable: Pageable;\n  response : CommentListResponseModel|null;\n  errorDesc: any = \"\";\n  loading: boolean = false;\n\n  subscription: Subscription = new Subscription();\n\n  constructor(\n    private commentsService: CommentsService, \n    private router: Router, \n    private activatedRoute: ActivatedRoute) \n  { \n    this.state = this.router.getCurrentNavigation()?.extras.state;\n    this.response = null;\n    this.pageable = {\n      page: 0\n    };\n  }\n\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe(params => {\n      const pageNum = params.pageNum ?? 0;\n      this.fetchPage(pageNum);\n    });\n    // Requery when the backend data changes\n    this.subscription.add(\n      this.commentsService.onChange.subscribe({ next: () =>  this.fetchPage(0) })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  fetchPage(pageNum: number): void {\n    //const routeParams = this.route.snapshot.paramMap;\n    //this.organizationId = routeParams.get('orgId') as string;  \n    this.pageable.page = pageNum;\n    this.loading = true;\n    this.commentsService.all(this.state?.endpoint, this.postId, this.pageable)\n      .subscribe(\n      {\n        next: (result: CommentListResponseModel) => {\n          this.response = result;\n          this.loading = false;\n        },\n        error: (err: any) => {\n          this.errorDesc = err.message;\n          this.loading = false;\n          console.log(this.errorDesc);\n        }\n      }\n    );\n  }\n\n  get items(): CommentModel[] {\n    if(!this.response?._embedded.comments)\n      return [];\n    return this.response?._embedded.comments;\n  }\n\n  get page(): PageModel|undefined {\n    return this.response?.page;\n  }\n\n  gotoPage(evt:any): void {\n    this.fetchPage(evt-1);\n  }\n}\n","<div *ngIf=\"loading; else contents\">\n    <utils-loader></utils-loader>\n</div>\n\n<ng-template #contents>\n    <utils-alert *ngIf=\"errorDesc;else itemsList\" [dismissable]=\"true\">\n        <p>\n            The specified request could not be completed!\n        </p>\n        <hr>\n        <p class=\"mb-0\">Error Details: </p>\n        <p>{{ errorDesc }}</p>\n    </utils-alert>\n</ng-template>\n\n<ng-template #itemsList>\n\n    <ng-container\n        [ngTemplateOutlet]=\"headerTemplate || defaultHeaderTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: this }\">\n    </ng-container>\n\n    <utils-pager [page]=\"page\" (onSelectPage)=\"gotoPage($event)\"></utils-pager>\n    <comment-list-view\n        [comments]=\"items\"\n        [itemTemplate]=\"itemTemplate\"\n        [noContentsTemplate]=\"noContentsTemplate\">\n    </comment-list-view>\n    <utils-pager [page]=\"page\" (onSelectPage)=\"gotoPage($event)\"></utils-pager>\n\n    <ng-container\n        [ngTemplateOutlet]=\"footerTemplate || defaultFooterTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: this }\">\n    </ng-container>\n\n</ng-template>\n\n<ng-template #defaultHeaderTemplate>\n</ng-template>\n\n<ng-template #defaultFooterTemplate>\n</ng-template>\n","import { Component, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\nimport { ViewEvent } from 'utils';\nimport { BlogPostModel } from '../../models/blog-post';\nimport { TopicModel } from '../../models/topic';\n\nexport type BlogPostViewEvent = ViewEvent<BlogPostModel>;\n\n@Component({\n  selector: 'blog-post-view',\n  templateUrl: './blog-post-view.component.html',\n  styleUrls: ['./blog-post-view.component.scss']\n})\nexport class BlogPostViewComponent implements OnInit {\n\n  @Input() post!: BlogPostModel;\n  @Input() topics!: TopicModel[];\n  @Input() enableComments: boolean = true;\n\n  @Input() headerTemplate: TemplateRef<any> | undefined;\n  @Input() contentTemplate: TemplateRef<any> | undefined;\n  @Input() footerTemplate: TemplateRef<any> | undefined;\n\n  @Output() onSelectItem = new EventEmitter<BlogPostViewEvent>();\n\n  constructor() { }\n\n  ngOnInit(): void { }\n\n  get postId(): number {\n    return this.post.id;\n  }\n\n  selectItem(item: BlogPostModel, opcode: string): void {\n    this.onSelectItem.emit({\n      opcode: opcode,\n      item: item\n    });\n  }\n}\n","<div *ngIf=\"post\" class=\"bg-light p-4\">\n\n  <ng-container \n    [ngTemplateOutlet]=\"headerTemplate || defaultHeaderTemplate\"\n    [ngTemplateOutletContext]=\"{ $implicit: post, list: this }\">\n  </ng-container>\n\n  <ng-container \n    [ngTemplateOutlet]=\"contentTemplate || defaultContentTemplate\"\n    [ngTemplateOutletContext]=\"{ $implicit: post, list: this }\">\n  </ng-container>\n\n  <ng-container \n    [ngTemplateOutlet]=\"footerTemplate || defaultFooterTemplate\"\n    [ngTemplateOutletContext]=\"{ $implicit: post, list: this }\">\n  </ng-container>\n\n</div>\n\n<ng-template #defaultContentTemplate let-item let-parent=\"list\">\n  <p class=\"posttext \">\n    {{item.text}}\n  </p>\n  <h5>Posted under Topics:</h5>\n  <blog-topic-list-view [topics]=\"topics\"></blog-topic-list-view>\n  <hr class=\"my-4\">\n  <ng-container *ngIf=\"parent.enableComments\">\n    <comment-editor [updateMode]=\"false\" *authRequireLogin=\"true\"></comment-editor>\n    <hr class=\"my-4\">\n    <h5>Comments:</h5>\n    <div class=\"mb-3 col-sm-12\">\n      <blog-comment-list [postId]=\"postId\"></blog-comment-list>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #defaultHeaderTemplate let-item let-parent=\"list\">\n  <div class=\"d-flex justify-content-between\">\n    <div>\n      <h2 class=\"blog-post-list-post-title\">{{item.title}}</h2>\n      <div class=\"created\"> {{item.owner}} created the post on {{item.createdOn | prettyDate }}.</div>\n    </div>\n    <div class=\"d-flex justify-content-between\">\n      <div class=\"ml-1\" *authRequireOwner=\"item.owner\">\n        <a class=\"btn btn-success\" role=\"button\" (click)=\"parent.selectItem(item, 'edit')\">Edit</a>\n      </div>\n      <div class=\"ml-1\" *authRequireOwner=\"item.owner\">\n        <a class=\"btn btn-success\" role=\"button\" (click)=\"parent.selectItem(item, 'delete')\">Delete</a>\n      </div>\n    </div>\n  </div>\n  <hr class=\"my-4\">\n</ng-template>\n\n<ng-template #defaultFooterTemplate let-item>\n  <div class=\"d-flex\">\n  </div>\n  <hr class=\"my-4\">\n</ng-template>\n","import { Component, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BlogPostModel, BlogPostResponseModel } from '../../models/blog-post';\nimport { TopicModel } from '../../models/topic';\nimport { PostsService } from '../../services/posts.service';\nimport { BlogPostViewEvent } from '../blog-post-view/blog-post-view.component';\n\n@Component({\n  selector: 'blog-post',\n  templateUrl: './blog-post.component.html',\n  styleUrls: ['./blog-post.component.scss']\n})\nexport class BlogPostComponent implements OnInit {\n\n  @Input() headerTemplate: TemplateRef<any> | undefined;\n  @Input() contentTemplate: TemplateRef<any> | undefined;\n  @Input() footerTemplate: TemplateRef<any> | undefined;\n\n  postId?: number;\n  postSlug?: string;\n  permalink: string = \"\";\n\n  response : BlogPostResponseModel|null;\n  errorDesc: any = \"\";\n  loading: boolean = false;\n\n  constructor(\n    private postService: PostsService, \n    private router: Router, \n    private activatedRoute: ActivatedRoute) \n  { \n    this.response = null;\n  }\n\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe(params => {\n      this.fetchPost(params.postId, params.slug);\n    });\n  }\n\n  fetchPost(postId: number, postSlug?: string): void {\n    this.postId = postId;\n    this.postSlug = postSlug;\n\n    this.loading = true;\n    this.postService.one(\"posts\", this.postId)\n      .subscribe(\n      {\n        next: (result: BlogPostResponseModel) => {\n          this.postItem = result;\n          this.loading = false;\n        },\n        error: (err: any) => {\n          this.errorDesc = err.message;\n          this.loading = false;\n          console.log(this.errorDesc);\n        }\n      }\n    );\n  }\n\n  set postItem(item: BlogPostResponseModel) {\n    this.response = item;\n    this.response.permalink = window.location.origin + this.router.url;\n    this.postId = this.response.id;\n    this.postSlug = this.response.slug;\n  }\n\n  get postItem(): BlogPostResponseModel {\n    return this.response!;\n  }\n\n  handleViewEvent(evt: BlogPostViewEvent) {\n    switch(evt.opcode) {\n      case 'edit': this.editPost(evt.item); break;\n      case 'delete': this.deletePost(evt.item); break;\n    }\n  }\n\n  editPost(post: BlogPostModel): void {\n    this.router.navigate(['/posts', 'edit', post.id]);\n  }\n\n  deletePost(post: BlogPostModel): void {\n    \n  }\n}\n","<div *ngIf=\"loading; else contents\">\n    <utils-loader></utils-loader>\n</div>\n\n<ng-template #contents>\n    <utils-alert *ngIf=\"errorDesc; else viewer\" [dismissable]=\"false\" [minimal]=\"false\">\n        <p>An error occurred accessing the post: {{ errorDesc }}</p>\n    </utils-alert>\n</ng-template>\n\n<ng-template #viewer>\n    <blog-post-view \n        [post]=\"postItem\" \n        [topics]=\"postItem?.topics\"\n        [headerTemplate]=\"headerTemplate\"\n        [contentTemplate]=\"contentTemplate\"\n        [footerTemplate]=\"footerTemplate\"\n        (onSelectItem)=\"handleViewEvent($event)\">\n    </blog-post-view>\n</ng-template>","import { AbstractControl, AsyncValidatorFn } from '@angular/forms';\nimport { of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { PostsService } from '../services/posts.service';\n\n\nexport function uniqueSlugValidator(postService: PostsService): AsyncValidatorFn \n{\n  return (control: AbstractControl): {[key: string]: boolean} | any => \n  {\n      var slug = control.value;\n      if (!slug || control.pristine) {\n        return of(null);\n      }\n      return postService.findBySlug(\"\", slug).pipe(\n          map(response => !!response.page.totalElements ? {'slugExists': true} : null)\n        );\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Pageable } from 'utils';\nimport { Observable, Subject, throwError } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { TopicsServiceConfig, TopicsServiceConfigToken } from '../config/config';\nimport { TopicResponseModel, TopicListResponseModel } from '../models/topic';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TopicsService {\n\n  public onChange: Subject<any> = new Subject<any>();\n\n  constructor(@Inject(TopicsServiceConfigToken) private config: TopicsServiceConfig, private httpClient: HttpClient) \n  { }\n\n  public all(endpoint: string, pageable?: Pageable): Observable<TopicListResponseModel> {\n\n    const page: number = pageable ? pageable.page : 0;\n    const pageSize: number = (pageable && pageable.limit) ? pageable.limit : this.config.pageSize;\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n\n    return this.httpClient\n            .get<TopicListResponseModel>(`${this.config.serviceBaseUrl}/${apiEndpoint}`, {\n              params: {\n                \"page\": page.toString(),\n                \"size\": pageSize.toString(),\n                \"sort\": \"caption,asc\"\n              }\n            })\n            .pipe(\n              map(data => {\n                return data as TopicListResponseModel;\n              })\n            );\n  }\n\n  public one(endpoint: string, id: number): Observable<TopicResponseModel> {\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n    return this.httpClient\n              .get<TopicResponseModel>(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}`)\n              .pipe(\n                map(data => {\n                  return data as TopicResponseModel;\n                })\n              );\n  }\n\n  public findByCaption(endpoint: string, caption: string, pageable?: Pageable): Observable<TopicListResponseModel> {\n    const query = {\n      \"conditions\": [\n        { \"attribute\": \"caption\", \"operator\": \"eq\", \"value\": `%${caption}%` }\n      ]\n    };\n    return this.search(endpoint, query, pageable);\n  }\n\n  public findMatchingCaption(endpoint: string, caption: string, pageable?: Pageable): Observable<TopicListResponseModel> {\n    const query = {\n      \"conditions\": [\n        { \"attribute\": \"caption\", \"operator\": \"like\", \"value\": `%${caption}%` }\n      ]\n    };\n    return this.search(endpoint, query, pageable);\n  }\n\n  public search(endpoint: string, query: any, pageable?: Pageable): Observable<TopicListResponseModel> {\n\n    const page: number = pageable ? pageable.page : 0;\n    const pageSize: number = (pageable && pageable.limit) ? pageable.limit : this.config.pageSize;\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n\n    return this.httpClient\n            .get<TopicListResponseModel>(`${this.config.serviceBaseUrl}/${apiEndpoint}/search`, \n            {\n              \"params\": { \n                \"q\": JSON.stringify(query),\n                \"page\": page.toString(),\n                \"size\": pageSize.toString(),\n                \"sort\": \"caption,asc\"\n              }\n            })\n            .pipe(\n              map(data => {\n                return data as TopicListResponseModel;\n              })\n            );\n  }\n\n  public create(endpoint: string, caption: string): Observable<TopicResponseModel> {\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n    const topicRepr = {\n      \"caption\": caption\n    };\n    return this.httpClient\n            .post<TopicResponseModel>(`${this.config.serviceBaseUrl}/${apiEndpoint}`, topicRepr)\n            .pipe(\n              map(data => {\n                return data as TopicResponseModel;\n              }),\n              tap({\n                next: x => { this.onChange.next(x); }\n              })\n            );\n  }\n\n  public update(endpoint: string, id: number, caption: string): Observable<TopicResponseModel> {\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n    const topicRepr = {\n      \"caption\": caption\n    };\n    return this.httpClient\n            .put<TopicResponseModel>(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}`, topicRepr)\n            .pipe(\n              map(data => {\n                return data as TopicResponseModel;\n              }),\n              tap({\n                next: x => { this.onChange.next(x); }\n              })\n            );\n  }\n\n  public delete(endpoint: string, id: number): Observable<void> {\n    const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;\n    return this.httpClient\n            .delete<void>(`${this.config.serviceBaseUrl}/${apiEndpoint}/${id}`)\n            .pipe(\n              catchError((error: any) => {\n                return throwError(new Error(error.status));\n              }),\n              tap({\n                next: x => { this.onChange.next(x); }\n              })\n            );\n  }\n}\n","import { Component, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { Pageable, PageModel } from 'utils';\nimport { TopicModel, TopicListResponseModel } from '../../models/topic';\nimport { TopicsService } from '../../services/topics.service';\nimport { TopicListViewEvent } from '../topic-list-view/topic-list-view.component';\n\n@Component({\n  selector: 'blog-topic-list',\n  templateUrl: './topic-list.component.html',\n  styleUrls: ['./topic-list.component.scss']\n})\nexport class TopicListComponent implements OnInit, OnDestroy {\n\n  @Input() enableSearch: boolean = true;\n  @Input() filterText: string = '';\n\n  @Input() itemTemplate: TemplateRef<any> | undefined;\n  @Input() noContentsTemplate: TemplateRef<any> | undefined;\n  @Input() headerTemplate: TemplateRef<any> | undefined;\n  @Input() footerTemplate: TemplateRef<any> | undefined;\n\n  @Input('onSelectTopic') \n  onSelect: (topic: TopicModel) => void = \n    (item) => this.navigateToTopicPosts(item);\n      \n  pageable: Pageable;\n  response : TopicListResponseModel|null;\n  errorDesc: any = \"\";\n  loading: boolean = false;\n\n  filter: string = \"\";\n\n  subscription: Subscription = new Subscription();\n\n\n  constructor(\n    private topicsService: TopicsService, \n    private router: Router, \n    private activatedRoute: ActivatedRoute) \n  { \n    this.response = null;\n    this.pageable = {\n      page: 0\n    };\n  }\n\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe(params => {\n      const pageNum = params.pageNum ?? 0;\n      this.fetchPage(pageNum);\n    }); \n    // Requery when the backend data changes\n    this.subscription.add(\n      this.topicsService.onChange.subscribe({ next: () => this.fetchPage(this.pageable.page) })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  responseHandler = {\n    next: (result: TopicListResponseModel) => {\n      this.response = result;\n      this.loading = false;\n    },\n    error: (err: any) => {\n      this.errorDesc = err.message;\n      this.loading = false;\n      console.log(this.errorDesc);\n    }\n  }\n\n  onApplyFilter(text: string): void {\n    this.filterText = text;\n    this.fetchPage(0);\n  }\n\n  fetchPage(pageNum: number): void {\n    this.pageable.page = pageNum;\n    if(!!this.filterText) {\n      this.topicsService.findMatchingCaption(\"\", this.filterText, this.pageable).subscribe(this.responseHandler);\n    }\n    else {\n      this.topicsService.all(\"\", this.pageable).subscribe(this.responseHandler);\n    }\n  }\n\n  get items(): TopicModel[] {\n    if(!this.response?._embedded.topics)\n      return [];\n    return this.response?._embedded.topics;\n  }\n\n  get page(): PageModel|undefined {\n    return this.response?.page;\n  }\n\n  get hasItems(): boolean {\n    return !!(this.page?.totalElements);\n  }\n\n  handleListViewEvent(evt: TopicListViewEvent) {\n    switch(evt.opcode) {\n      case 'select': this.onSelect(evt.item); break;\n    }\n  }\n\n  navigateToTopicPosts(topic: TopicModel): void {\n    this.router.navigate(['/topics', topic.id, \"posts\"], \n    { \n      state: { \"endpoint\": `topics/${topic.id}/posts` }\n    });\n  }\n\n  gotoPage(evt: any): void {\n    this.fetchPage(evt-1);\n  }\n}\n","<div *ngIf=\"loading; else contents\">\n    <utils-loader></utils-loader>\n</div>\n\n<ng-template #contents>\n    <utils-alert *ngIf=\"errorDesc;else itemsList\" [dismissable]=\"false\" [minimal]=\"true\">\n        <p>An error occurred fetching the topics list: {{ errorDesc }}</p>\n    </utils-alert>\n</ng-template>\n\n<ng-template #itemsList>\n\n    <ng-container\n        [ngTemplateOutlet]=\"headerTemplate || defaultHeaderTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: this }\">\n    </ng-container>\n\n    <utils-search-box (onApplyFilter)=\"onApplyFilter($event)\" *ngIf=\"enableSearch\">\n    </utils-search-box>\n    <blog-topic-list-view \n        [topics]=\"items\" \n        [itemTemplate]=\"itemTemplate\"\n        [noContentsTemplate]=\"noContentsTemplate\"\n        (onSelectItem)=\"handleListViewEvent($event)\">\n    </blog-topic-list-view>\n    <utils-pager [page]=\"page\" (onSelectPage)=\"gotoPage($event)\">\n    </utils-pager>\n\n    <ng-container\n        [ngTemplateOutlet]=\"footerTemplate || defaultFooterTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: this }\">\n    </ng-container>\n\n</ng-template>\n\n<ng-template #defaultHeaderTemplate>\n</ng-template>\n  \n<ng-template #defaultFooterTemplate>\n</ng-template>\n  ","import { Component, Input, OnInit, TemplateRef } from '@angular/core';\nimport { TopicModel } from '../../models/topic';\n\n@Component({\n  selector: 'topic-selector',\n  templateUrl: './topic-selector.component.html',\n  styleUrls: ['./topic-selector.component.css']\n})\nexport class TopicSelectorComponent implements OnInit {\n\n  @Input()\n  maxTopics: number = 10;\n  maxTopicsError: boolean = false;\n\n  @Input()\n  initialTopics: TopicModel[] = [];\n  selectedTopics: TopicModel[] = [];\n\n  @Input() itemTemplate: TemplateRef<any> | undefined;\n  @Input() noContentsTemplate: TemplateRef<any> | undefined;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.selectedTopics = this.initialTopics;\n  }\n\n  topicClicked: (topic: TopicModel) => void = \n    (item) => {\n      if(this.isTopicSelected(item))\n        this.unselectTopic(item);\n      else\n        this.selectTopic(item);\n    }\n\n  isTopicSelected(topic: TopicModel): boolean {\n    return this.selectedTopics.findIndex(i => i.caption.toUpperCase() === topic.caption.toUpperCase()) > -1;\n  }\n\n  selectTopic(topic: TopicModel): void {\n\n    this.maxTopicsError = (!!this.maxTopics && this.selectedTopics.length >= this.maxTopics);\n    if(this.maxTopicsError) {\n      return;\n    }\n\n    this.selectedTopics.push(topic);\n    this.selectedTopics.sort((a,b) => \n      a.caption.toUpperCase().localeCompare(b.caption.toUpperCase())\n    );\n  }\n\n  unselectTopic(topic: TopicModel): void {\n    this.selectedTopics = this.selectedTopics.filter(i => i.caption.toUpperCase() !== topic.caption.toUpperCase());\n    this.maxTopicsError = (!!this.maxTopics && this.selectedTopics.length >= this.maxTopics);\n  }\n}\n","\n\n<label class=\"form-label\">Selected Topics:</label>\n<div>\n    <blog-topic-list-view [topics]=\"selectedTopics\"></blog-topic-list-view>\n    <utils-alert *ngIf=\"maxTopicsError\" [dismissable]=\"true\" [minimal]=\"true\">\n        Sorry, cannot select more than {{maxTopics}} topics for a post.\n    </utils-alert>\n</div>\n<label class=\"form-label\">Available Topics:</label>\n<blog-topic-list \n    [itemTemplate]=\"itemTemplate\"\n    [noContentsTemplate]=\"noContentsTemplate\"\n    [onSelectTopic]=\"topicClicked\">\n</blog-topic-list>\n","import { Location } from '@angular/common';\nimport { Component, Input, OnInit, TemplateRef } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TopicModel, TopicResponseModel, TopicListResponseModel } from '../../models/topic';\nimport { TopicsService } from '../../services/topics.service';\n\n@Component({\n  selector: 'topic-editor',\n  templateUrl: './topic-editor.component.html',\n  styleUrls: ['./topic-editor.component.css']\n})\nexport class TopicEditorComponent implements OnInit {\n\n  @Input() headerTemplate: TemplateRef<any> | undefined;\n  @Input(\"topicId\") paramTopicId?: string;\n  @Input() updateMode: boolean = true;\n\n  topicId?: number;\n  topic : TopicModel|null = null;\n\n  errorDesc: any = \"\";\n  loading: boolean = false;\n\n  form!: FormGroup;\n\n  constructor(\n    private topicService: TopicsService,\n    private router: Router, \n    private location: Location,\n    private activatedRoute: ActivatedRoute) {}\n\n  ngOnInit(): void {\n\n    this.form = new FormGroup({\n      \"caption\": new FormControl(\"\", Validators.required)\n    });\n\n    this.activatedRoute.params.subscribe(params => {\n      this.topicId = params.topicId ?? this.paramTopicId;\n      if(this.isUpdateMode)\n        this.fetchTopic(this.topicId!);\n    });\n  }\n\n  get isUpdateMode(): boolean { \n    return this.updateMode && this.topicId !== undefined; \n  }\n  get caption() { return this.form.get('caption'); }\n\n  set theTopic(item: TopicModel) {\n    this.topic = this.updateMode ? item : null;\n    this.topicId = this.updateMode ? this.topic?.id : undefined;\n    console.info(\"Got post id: \" + this.topicId!);\n  }\n\n  updateForm(): void {\n    this.caption!.setValue (this.topic?.caption);\n  }\n\n  fetchResponseHandler = {\n    next: (result: TopicResponseModel) => {\n      this.theTopic = result;\n      this.updateForm();\n      this.loading = false;\n    },\n    error: (err: any) => {\n      this.errorDesc = err.message;\n      this.loading = false;\n      return false;\n    }\n  };\n\n  fetchTopic(topicId: number): void {\n    this.loading = true;\n    this.topicService\n      .one(\"\", topicId)\n      .subscribe(this.fetchResponseHandler);\n  }      \n\n  createNewTopic(): void {\n    this.topicService\n      .create(\"\", this.caption?.value)\n      .subscribe(this.fetchResponseHandler);\n  }\n\n  updateTopic(): void {\n    this.topicService\n      .update(\"\", this.topicId!, this.caption?.value)\n      .subscribe(this.fetchResponseHandler);\n  }\n\n  cancel(): void {\n    this.location.back();\n  }\n}\n","<div *ngIf=\"loading; else contents\">\n    <utils-loader></utils-loader>\n</div>\n\n<ng-template #defaultTitleTemplate let-item>\n    <div class=\"d-flex justify-content-between\">\n        <div>\n            <h5>CREATE A NEW TOPIC</h5>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #contents>\n    <ng-container \n        [ngTemplateOutlet]=\"headerTemplate || defaultTitleTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: this }\">\n    </ng-container>\n    <utils-alert *ngIf=\"errorDesc; else editor\" [dismissable]=\"false\" [minimal]=\"false\">\n        <p>An error occurred accessing the post: {{ errorDesc }}</p>\n    </utils-alert>\n</ng-template>\n\n<ng-template #editor>\n    <form [formGroup]=\"form\" novalidate onSubmit=\"return false;\">\n        <div class=\"row\">\n            <div class=\"mb-3 col-sm-9\">\n                <input type=\"text\" class=\"form-control\" id=\"caption\" placeholder=\"Topic name ... \"\n                    formControlName=\"caption\" required>\n\n                <div *ngIf=\"caption?.invalid && (caption?.dirty || caption?.touched)\">\n                    <utils-alert *ngIf=\"caption?.errors?.required\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Name is required.\n                    </utils-alert>\n                    <utils-alert *ngIf=\"caption?.errors?.topicExists\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Topic name is already taken!\n                    </utils-alert>\n                </div>\n\n            </div>\n            <div class=\"mb-3 col-sm-3\" *ngIf=\"!isUpdateMode\">\n                <input class=\"btn btn-primary\" type=\"button\" [disabled]=\"loading || !form.valid\" value=\"Create\" (click)=\"createNewTopic()\">\n            </div>\n            <div class=\"mb-3 col-sm-3\" *ngIf=\"isUpdateMode\">\n                <input class=\"btn btn-primary\" type=\"button\" [disabled]=\"loading || !form.valid\" value=\"Update\" (click)=\"updateTopic()\">\n            </div>\n        </div>\n    </form>\n</ng-template>\n","import { Location } from '@angular/common';\nimport { Component, Inject, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PostsServiceConfig, PostsServiceConfigToken } from '../../config/config';\nimport { BlogPostModel, BlogPostResponseModel } from '../../models/blog-post';\nimport { TopicModel } from '../../models/topic';\nimport { PostsService } from '../../services/posts.service';\nimport { TopicsService } from '../../services/topics.service';\nimport { uniqueSlugValidator } from '../../validators/unique-slug-validator.directive';\nimport { TopicSelectorComponent } from '../topic-selector/topic-selector.component';\n\nfunction slugify(text: string) {\n  const from = \"ãàáäâẽèéëêìíïîõòóöôùúüûñç·/_,:;\"\n  const to = \"aaaaaeeeeeiiiiooooouuuunc------\"\n\n  const newText = text.split('').map(\n    (letter, i) => letter.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i)))\n\n  return newText\n    .toString()                     // Cast to string\n    .toLowerCase()                  // Convert the string to lowercase letters\n    .trim()                         // Remove whitespace from both sides of a string\n    .replace(/\\s+/g, '-')           // Replace spaces with -\n    .replace(/&/g, '-y-')           // Replace & with 'and'\n    .replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\n    .replace(/\\-\\-+/g, '-');        // Replace multiple - with single -\n}\n\n@Component({\n  selector: 'blog-post-editor',\n  templateUrl: './blog-post-editor.component.html',\n  styleUrls: ['./blog-post-editor.component.scss']\n})\nexport class BlogPostEditorComponent implements OnInit {\n\n  @Input() headerTemplate: TemplateRef<any> | undefined;\n  @Input(\"postId\") paramPostId?: number;\n  @Input() updateMode: boolean = true;\n\n  postId?: number;\n  post : BlogPostModel|null = null;\n\n  successDesc: any = \"\";\n  errorDesc: any = \"\";\n  loading: boolean = false;\n\n  form!: FormGroup;\n\n  @ViewChild('topicSelector')\n  topicSelector!: TopicSelectorComponent;\n\n  constructor(\n    @Inject(PostsServiceConfigToken) private config: PostsServiceConfig,\n    private postService: PostsService, \n    private location: Location,\n    private activatedRoute: ActivatedRoute) {}\n\n  ngOnInit(): void {\n\n    this.form = new FormGroup(\n    {\n      \"title\": new FormControl(\"\", [\n          Validators.required,\n          Validators.maxLength(this.config.maxTitleLength),\n        ]),\n      \"slug\": new FormControl(\"\", [\n          Validators.required,\n          Validators.maxLength(this.config.maxTitleLength),\n          Validators.pattern(/^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/)\n        ], \n        uniqueSlugValidator(this.postService)\n      ),\n      \"text\": new FormControl(\"\", [\n          Validators.required, \n          Validators.maxLength(this.config.maxContentLength)\n        ]),\n    });\n\n    this.title?.valueChanges.subscribe(val => {\n      if(!this.slug?.touched || !this.slug?.value) {\n        this.generateSlug();\n      }\n    });\n\n    this.activatedRoute.params.subscribe(params => {\n      this.postId = params.postId ?? this.paramPostId;\n      if(this.isUpdateMode)\n        this.fetchPost(this.postId!);\n    });\n  }\n\n  get isUpdateMode(): boolean { \n    return this.updateMode && this.postId !== undefined; \n  }\n  get title() { return this.form.get('title'); }\n  get slug() { return this.form.get('slug'); }\n  get text() { return this.form.get('text'); }\n\n  get selectedTopics(): TopicModel[] {\n    return this.post?.topics || [];\n  }\n\n  set blogPost(item: BlogPostModel) {\n    this.post = this.updateMode ? item : null;\n    this.postId = this.updateMode ? this.post?.id : undefined;\n    console.info(\"Got post id: \" + this.postId!);\n  }\n\n  generateSlug(): void {\n    this.slug?.setValue(slugify(this.title?.value));\n  }\n\n  updateForm(): void {\n    this.title!.setValue (this.post?.title);\n    this.slug!.setValue (this.post?.slug);\n    this.text!.setValue (this.post?.text);\n  }\n\n  fetchResponseHandler = {\n    next: (result: BlogPostResponseModel) => {\n      this.blogPost = result;\n      this.updateForm();\n      this.loading = false;\n    },\n    error: (err: any) => {\n      this.errorDesc = err.message;\n      this.loading = false;\n      return false;\n    }\n  };\n\n  fetchPost(postId: number): void {\n    this.loading = true;\n    this.postService\n      .one(\"posts\", postId)\n      .subscribe(this.fetchResponseHandler);\n  }      \n\n  updateResponseHandler = {\n    next: (result: BlogPostResponseModel) => {\n      this.blogPost = result;\n      this.assignTopics();\n    },\n    error: (err: any) => {\n      this.errorDesc = err.message;\n      this.loading = false;\n      return false;\n    }\n  };\n\n  createNewPost(): void {\n    this.postService\n      .create(\"posts\", this.slug?.value, this.title?.value, this.text?.value)\n      .subscribe(this.updateResponseHandler);\n  }\n\n  updatePost(): void {\n    this.postService\n      .update(\"posts\", this.postId!, this.slug?.value, this.title?.value, this.text?.value)\n      .subscribe(this.updateResponseHandler);\n  }\n\n  assignTopics(): void {\n    const selectedTopics = this.topicSelector.selectedTopics.map(i => i.id);\n    console.info(selectedTopics);\n    this.postService\n      .assignTopics(\"posts\", this.postId!, selectedTopics)\n      .subscribe({\n        next: () => {\n          this.updateForm();\n          this.successDesc = \"Post updated successfully!\";\n          this.loading = false;\n        },\n        error: (err: any) => {\n          this.errorDesc = err.message;\n          this.loading = false;\n          return false;\n        }\n      });\n  }\n\n  cancel(): void {\n    this.location.back();\n  }\n}\n","<div *ngIf=\"loading; else contents\">\n    <utils-loader></utils-loader>\n</div>\n\n<ng-template #defaultTitleTemplate let-item>\n    <div class=\"d-flex justify-content-between\">\n        <div>\n            <h5>WRITE A POST</h5>\n        </div>\n        <div><a class=\"btn btn-success\" role=\"button\" (click)=\"cancel()\">Cancel</a></div>\n    </div>\n    <hr class=\"my-4\">\n</ng-template>\n\n<ng-template #contents>\n    <ng-container \n        [ngTemplateOutlet]=\"headerTemplate || defaultTitleTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: this }\">\n    </ng-container>\n    <utils-alert *ngIf=\"successDesc\" [dismissable]=\"false\" [minimal]=\"false\">\n        <p>{{ successDesc }}</p>\n    </utils-alert>\n    <utils-alert *ngIf=\"errorDesc; else editor\" [dismissable]=\"false\" [minimal]=\"false\">\n        <p>An error occurred accessing the post: {{ errorDesc }}</p>\n    </utils-alert>\n</ng-template>\n\n<ng-template #editor>\n    <form [formGroup]=\"form\" novalidate onSubmit=\"return false;\">\n        <div class=\"row\">\n            <div class=\"mb-3 col-sm-12\">\n                <label for=\"title\" class=\"form-label\">Title</label>\n                <input type=\"text\" class=\"form-control\" id=\"title\" \n                    placeholder=\"Title of your post ... \"\n                    formControlName=\"title\" required>\n\n                <div *ngIf=\"title?.invalid && (title?.dirty || title?.touched)\">\n                    <utils-alert *ngIf=\"title?.errors?.required\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Title is required.\n                    </utils-alert>\n                    <utils-alert *ngIf=\"title?.errors?.maxLength\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Title length exceeds limit.\n                    </utils-alert>\n                </div>\n\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"mb-3 col-sm-12\">\n                <label for=\"slug\" class=\"form-label\">Slug</label>\n                <div class=\"d-flex justify-content-between\">\n                    <input type=\"text\" class=\"form-control\" id=\"slug\" \n                        placeholder=\"Slug goes here ... e.g. this-is-a-valid-slug\"\n                        formControlName=\"slug\" required>\n                    <input class=\"btn btn-primary ml-1\" type=\"button\" [disabled]=\"loading\" value=\"Auto Generate\" (click)=\"generateSlug()\">\n                </div>\n                <div *ngIf=\"slug?.invalid && (slug?.dirty || slug?.touched)\">\n                    <utils-alert *ngIf=\"slug?.errors?.required\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Slug is required.\n                    </utils-alert>\n                    <utils-alert *ngIf=\"slug?.errors?.maxLength\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Slug length exceeds limit.\n                    </utils-alert>\n                    <utils-alert *ngIf=\"slug?.errors?.pattern\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Only clean url like expressions are allowed in slugs e.g. this-is-a-valid-slug\n                    </utils-alert>\n                    <utils-alert *ngIf=\"slug?.errors?.slugExists\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Slug is already taken!\n                    </utils-alert>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"mb-3 col-sm-6\">\n                <label for=\"text\" class=\"form-label\">Write your story here:</label>\n                <textarea class=\"form-control\" id=\"postText\" rows=\"3\" formControlName=\"text\" required></textarea>\n\n                <div *ngIf=\"text?.invalid && (text?.dirty || text?.touched)\">\n                    <utils-alert *ngIf=\"text?.errors?.pattern\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Sorry, cannot leave this empty!\n                    </utils-alert>\n                    <utils-alert *ngIf=\"text?.errors?.maxLength\" [dismissable]=\"false\" [minimal]=\"true\">\n                        Conent length exceeds limit.\n                    </utils-alert>\n                </div>\n\n            </div>\n            <div class=\"mb-3 col-sm-6\">\n                <label class=\"form-label\">Preview</label>\n                <markdown class=\"variable-binding\" [data]=\"text?.value\"></markdown>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"mb-3 col-sm-12\">\n                <topic-selector #topicSelector \n                    [initialTopics]=\"selectedTopics\"\n                    [noContentsTemplate]=\"topicsNotFoundTemplate\">\n                </topic-selector>\n            </div>\n        </div>\n        <div class=\"mb-3\" *ngIf=\"!isUpdateMode\">\n            <input class=\"btn btn-primary\" type=\"button\" [disabled]=\"loading || !form.valid\" value=\"Post\" (click)=\"createNewPost()\">\n        </div>\n        <div class=\"mb-3\" *ngIf=\"isUpdateMode\">\n            <input class=\"btn btn-primary\" type=\"button\" [disabled]=\"loading || !form.valid\" value=\"Update\" (click)=\"updatePost()\">\n        </div>\n    </form>\n</ng-template>\n\n<ng-template #topicsNotFoundTemplate let-item>\n    No topic found!\n    <topic-editor *authRequireRole=\"'admin'\"></topic-editor>\n</ng-template>\n","import { Component, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\nimport { ViewEvent } from 'utils';\nimport { BlogPostModel } from '../../models/blog-post';\n\nexport type BlogPostListViewEvent = ViewEvent<BlogPostModel>;\n\n@Component({\n  selector: 'blog-post-list-view',\n  templateUrl: './blog-post-list-view.component.html',\n  styleUrls: ['./blog-post-list-view.component.scss'],\n})\nexport class BlogPostListViewComponent implements OnInit {\n\n  @Input() posts!: BlogPostModel[];\n\n  @Input() itemTemplate: TemplateRef<any> | undefined;\n  @Input() noContentsTemplate: TemplateRef<any> | undefined;\n\n  @Output() onSelectItem = new EventEmitter<BlogPostListViewEvent>();\n\n  ngOnInit(): void {}\n\n  selectItem(item: BlogPostModel, opcode: string): void {\n    this.onSelectItem.emit({\n      opcode: opcode,\n      item: item\n    });\n  }\n}\n","<ng-container *ngIf=\"posts\">\n    <div *ngFor=\"let x of posts\" class=\"bg-light\">\n        <ng-container [ngTemplateOutlet]=\"itemTemplate || defaultItemTemplate\"\n            [ngTemplateOutletContext]=\"{ $implicit: x, list: this }\">\n        </ng-container>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"!posts\">\n    <ng-container [ngTemplateOutlet]=\"noContentsTemplate || defaultNoContentsTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: this }\">\n    </ng-container>\n</ng-container>\n\n<ng-template #defaultItemTemplate let-item let-parent=\"list\">\n    <div class=\"p-1\">\n        <a (click)=\"parent.selectItem(item, 'select')\"><h4 class=\"blog-post-list-post-title\">{{item.title}}</h4></a>\n        <div class=\"created\"> {{item.owner}} created the post on {{item.createdOn | prettyDate }}.</div>\n        <p class=\"posttext \">\n            {{item.text}}\n        </p>\n        <p>\n            <blog-topic-list-view [topics]=\"item.topics\"></blog-topic-list-view>\n        </p>\n        <button class=\"btn btn-success\" (click)=\"parent.selectItem(item, 'select')\">Read More...</button>\n        <hr class=\"my-4\">\n    </div>\n</ng-template>\n\n<ng-template #defaultNoContentsTemplate let-item>\n    No blog posts found! Why not create one?\n</ng-template>","import { Component, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BlogPostModel, BlogPostListResponseModel } from '../../models/blog-post';\nimport { PostsService } from '../../services/posts.service';\nimport { Pageable, PageModel } from 'utils';\nimport { BlogPostListViewEvent } from '../blog-post-list-view/blog-post-list-view.component';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'blog-post-list',\n  templateUrl: './blog-post-list.component.html',\n  styleUrls: ['./blog-post-list.component.scss']\n})\nexport class BlogPostListComponent implements OnInit, OnDestroy {\n\n  @Input() noContentsTemplate: TemplateRef<any> | undefined;\n  @Input() itemTemplate: TemplateRef<any> | undefined;\n  @Input() headerTemplate: TemplateRef<any> | undefined;\n  @Input() footerTemplate: TemplateRef<any> | undefined;\n\n  @Input('onSelectPost') \n  onSelect: (post: BlogPostModel) => void = \n    (item) => this.navigateToPost(item);\n\n  state: any;\n\n  pageable: Pageable;\n  response : BlogPostListResponseModel|null;\n  errorDesc: any = \"\";\n  loading: boolean = false;\n\n  subscription: Subscription = new Subscription();\n\n  constructor(\n    private postService: PostsService, \n    private router: Router, \n    private activatedRoute: ActivatedRoute) \n  { \n    this.state = this.router.getCurrentNavigation()?.extras.state;\n    this.response = null;\n    this.pageable = {\n      page: 0\n    };\n  }\n\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe(params => {\n      const pageNum = params.pageNum ?? 0;\n      this.fetchPage(pageNum);\n    });\n    // Requery when the backend data changes\n    this.subscription.add(\n      this.postService.onChange.subscribe({ next: () => this.fetchPage(0) })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  fetchPage(pageNum: number): void {\n    //const routeParams = this.route.snapshot.paramMap;\n    //this.organizationId = routeParams.get('orgId') as string;  \n    this.pageable.page = pageNum;\n    this.loading = true;\n    this.postService.all(this.state?.endpoint, this.pageable)\n      .subscribe(\n      {\n        next: (result: BlogPostListResponseModel) => {\n          this.response = result;\n          this.loading = false;\n        },\n        error: (err: any) => {\n          this.errorDesc = err.message;\n          this.loading = false;\n          console.log(this.errorDesc);\n        }\n      }\n    );\n  }\n\n  get items(): BlogPostModel[] {\n    if(!this.response?._embedded.posts)\n      return [];\n    return this.response?._embedded.posts;\n  }\n\n  get page(): PageModel|undefined {\n    return this.response?.page;\n  }\n\n  handleListViewEvent(evt: BlogPostListViewEvent) {\n    switch(evt.opcode) {\n      case 'select': this.onSelect(evt.item); break;\n    }\n  }\n\n  navigateToPost(post: BlogPostModel): void {\n    this.router.navigate([\"/posts\", post.id, post.slug]);\n  }\n\n  gotoPage(evt:any): void {\n    this.fetchPage(evt-1);\n  }\n}\n","<div *ngIf=\"loading; else contents\">\n    <utils-loader></utils-loader>\n</div>\n\n<ng-template #contents>\n    <utils-alert *ngIf=\"errorDesc;else itemsList\" [dismissable]=\"true\">\n        <p>\n            The specified request could not be completed!\n        </p>\n        <hr>\n        <p class=\"mb-0\">Error Details: </p>\n        <p>{{ errorDesc }}</p>\n    </utils-alert>\n</ng-template>\n\n<ng-template #itemsList>\n\n    <ng-container\n        [ngTemplateOutlet]=\"headerTemplate || defaultHeaderTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: this }\">\n    </ng-container>\n\n    <utils-pager [page]=\"page\" (onSelectPage)=\"gotoPage($event)\"></utils-pager>\n    <blog-post-list-view\n        [posts]=\"items\"\n        [itemTemplate]=\"itemTemplate\"\n        [noContentsTemplate]=\"noContentsTemplate\"\n        (onSelectItem)=\"handleListViewEvent($event)\">\n    </blog-post-list-view>\n    <utils-pager [page]=\"page\" (onSelectPage)=\"gotoPage($event)\"></utils-pager>\n\n    <ng-container\n        [ngTemplateOutlet]=\"footerTemplate || defaultFooterTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: this }\">\n    </ng-container>\n\n</ng-template>\n\n<ng-template #defaultHeaderTemplate>\n</ng-template>\n\n<ng-template #defaultFooterTemplate>\n</ng-template>\n","/*\n * Public API Surface of bookmarks\n */\n\nexport * from './blog-post/blog-post.component';\nexport * from './blog-post-editor/blog-post-editor.component';\nexport * from './blog-post-list/blog-post-list.component';\nexport * from './blog-post-list-view/blog-post-list-view.component';\nexport * from './blog-post/blog-post.component';\nexport * from './blog-post-view/blog-post-view.component';\nexport * from './topic-list/topic-list.component';\nexport * from './topic-list-view/topic-list-view.component';\nexport * from './comment-list/comment-list.component';\nexport * from './comment-list-view/comment-list-view.component';\n","/*\n * Public API Surface of blog\n */\n\nexport * from './posts.service';\nexport * from './topics.service';\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { OidcAuthModule } from 'auth-oidc';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { UtilsModule } from 'utils';\nimport { \n  BlogPostComponent, \n  BlogPostEditorComponent, \n  BlogPostListComponent, \n  BlogPostListViewComponent, \n  BlogPostViewComponent, \n  TopicListComponent, \n  TopicListViewComponent \n} from './components/public-api';\nimport { BlogModuleConfig, CommentsServiceConfigToken, PostsServiceConfigToken, TopicsServiceConfigToken } from './config/config';\nimport { PostsService } from './services/posts.service';\nimport { TopicsService } from './services/topics.service';\nimport { TopicSelectorComponent } from './components/topic-selector/topic-selector.component';\nimport { TopicEditorComponent } from './components/topic-editor/topic-editor.component';\nimport { CommentListComponent } from './components/comment-list/comment-list.component';\nimport { CommentListViewComponent } from './components/comment-list-view/comment-list-view.component';\nimport { CommentEditorComponent } from './components/comment-editor/comment-editor.component';\n\n@NgModule({\n  declarations: [\n    BlogPostListViewComponent,\n    BlogPostListComponent,\n    TopicListViewComponent,\n    TopicListComponent,\n    BlogPostEditorComponent,\n    BlogPostComponent,\n    BlogPostViewComponent,\n    TopicSelectorComponent,\n    TopicEditorComponent,\n    CommentListComponent,\n    CommentListViewComponent,\n    CommentEditorComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    MarkdownModule.forChild(),\n    OidcAuthModule.forChild(),\n    UtilsModule\n  ],\n  exports: [\n    BlogPostListViewComponent,\n    BlogPostListComponent,\n    TopicListViewComponent,\n    TopicListComponent,\n    BlogPostEditorComponent,\n    BlogPostComponent,\n    BlogPostViewComponent\n  ]\n})\nexport class BlogModule {\n\n  static forRoot(config: BlogModuleConfig): ModuleWithProviders<BlogModule> {\n    return {\n      ngModule: BlogModule,\n      providers: [\n        PostsService,\n        TopicsService,\n        {\n          provide: PostsServiceConfigToken,\n          useValue: config.posts\n        },\n        {\n          provide: CommentsServiceConfigToken,\n          useValue: config.comments\n        },\n        {\n          provide: TopicsServiceConfigToken,\n          useValue: config.topics\n        }\n      ]\n    }\n  }\n\n}\n","/*\n * Public API Surface of blog\n */\n\nexport * from './lib/config/public-api';\nexport * from './lib/models/public-api';\nexport * from './lib/components/public-api';\nexport * from './lib/services/public-api';\nexport * from './lib/blog.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}