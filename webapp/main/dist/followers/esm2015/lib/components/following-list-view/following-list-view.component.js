import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class FollowingListViewComponent {
    constructor() {
        this.onSelectItem = new EventEmitter();
    }
    ngOnInit() { }
    selectItem(item, opcode) {
        this.onSelectItem.emit({
            opcode: opcode,
            item: item
        });
    }
}
FollowingListViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: FollowingListViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FollowingListViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.4", type: FollowingListViewComponent, selector: "following-list-view", inputs: { items: "items", itemTemplate: "itemTemplate", noContentsTemplate: "noContentsTemplate" }, outputs: { onSelectItem: "onSelectItem" }, ngImport: i0, template: "<ng-container *ngIf=\"items\">\n    <ul class=\"list-group checked-list-box\">\n        <li class=\"list-group-item\" *ngFor=\"let x of items; index as i\">\n            <ng-container \n                [ngTemplateOutlet]=\"itemTemplate || defaultItemTemplate\"\n                [ngTemplateOutletContext]=\"{ $implicit: x, index: i, list: this }\">\n            </ng-container>\n        </li>\n    </ul>\n</ng-container>\n<ng-container *ngIf=\"!items\">\n    <ng-container \n        [ngTemplateOutlet]=\"noContentsTemplate || defaultNoContentsTemplate\"\n        [ngTemplateOutletContext]=\"{ $implicit: this }\">\n    </ng-container>\n</ng-container>\n\n<ng-template #defaultItemTemplate let-item let-parent=\"list\">\n    <span class=\"ml-2\" (click)=\"parent.selectItem(item, 'select')\">{{item.fullName}}</span>\n</ng-template>\n\n<ng-template #defaultNoContentsTemplate let-item>\n    The list is empty at the moment!\n</ng-template>", styles: [""], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: FollowingListViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'following-list-view',
                    templateUrl: './following-list-view.component.html',
                    styleUrls: ['./following-list-view.component.css']
                }]
        }], propDecorators: { items: [{
                type: Input
            }], itemTemplate: [{
                type: Input
            }], noContentsTemplate: [{
                type: Input
            }], onSelectItem: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9sbG93aW5nLWxpc3Qtdmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9mb2xsb3dlcnMvc3JjL2xpYi9jb21wb25lbnRzL2ZvbGxvd2luZy1saXN0LXZpZXcvZm9sbG93aW5nLWxpc3Qtdmlldy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9mb2xsb3dlcnMvc3JjL2xpYi9jb21wb25lbnRzL2ZvbGxvd2luZy1saXN0LXZpZXcvZm9sbG93aW5nLWxpc3Qtdmlldy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFlLE1BQU0sZUFBZSxDQUFDOzs7QUFXNUYsTUFBTSxPQUFPLDBCQUEwQjtJQUx2QztRQVlFLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQTBCLENBQUM7S0FVM0Q7SUFSQyxRQUFRLEtBQVUsQ0FBQztJQUVuQixVQUFVLENBQUMsSUFBb0IsRUFBRSxNQUFjO1FBQzdDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQ3JCLE1BQU0sRUFBRSxNQUFNO1lBQ2QsSUFBSSxFQUFFLElBQUk7U0FDWCxDQUFDLENBQUM7SUFDTCxDQUFDOzt1SEFoQlUsMEJBQTBCOzJHQUExQiwwQkFBMEIsME1DWHZDLDI2QkF1QmM7MkZEWkQsMEJBQTBCO2tCQUx0QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFdBQVcsRUFBRSxzQ0FBc0M7b0JBQ25ELFNBQVMsRUFBRSxDQUFDLHFDQUFxQyxDQUFDO2lCQUNuRDs4QkFHVSxLQUFLO3NCQUFiLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFDRyxrQkFBa0I7c0JBQTFCLEtBQUs7Z0JBR04sWUFBWTtzQkFEWCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZpZXdFdmVudCB9IGZyb20gJ3V0aWxzJztcbmltcG9ydCB7IEZvbGxvd2luZ01vZGVsIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2ZvbGxvd2luZyc7XG5cbmV4cG9ydCB0eXBlIEZvbGxvd2luZ0xpc3RWaWV3RXZlbnQgPSBWaWV3RXZlbnQ8Rm9sbG93aW5nTW9kZWw+O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb2xsb3dpbmctbGlzdC12aWV3JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2ZvbGxvd2luZy1saXN0LXZpZXcuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9mb2xsb3dpbmctbGlzdC12aWV3LmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBGb2xsb3dpbmdMaXN0Vmlld0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0KCkgaXRlbXM/OiBGb2xsb3dpbmdNb2RlbFtdO1xuICBASW5wdXQoKSBpdGVtVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4gfCB1bmRlZmluZWQ7XG4gIEBJbnB1dCgpIG5vQ29udGVudHNUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PiB8IHVuZGVmaW5lZDtcblxuICBAT3V0cHV0KCkgXG4gIG9uU2VsZWN0SXRlbSA9IG5ldyBFdmVudEVtaXR0ZXI8Rm9sbG93aW5nTGlzdFZpZXdFdmVudD4oKTtcblxuICBuZ09uSW5pdCgpOiB2b2lkIHt9XG4gICAgXG4gIHNlbGVjdEl0ZW0oaXRlbTogRm9sbG93aW5nTW9kZWwsIG9wY29kZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5vblNlbGVjdEl0ZW0uZW1pdCh7XG4gICAgICBvcGNvZGU6IG9wY29kZSxcbiAgICAgIGl0ZW06IGl0ZW1cbiAgICB9KTtcbiAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cIml0ZW1zXCI+XG4gICAgPHVsIGNsYXNzPVwibGlzdC1ncm91cCBjaGVja2VkLWxpc3QtYm94XCI+XG4gICAgICAgIDxsaSBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbVwiICpuZ0Zvcj1cImxldCB4IG9mIGl0ZW1zOyBpbmRleCBhcyBpXCI+XG4gICAgICAgICAgICA8bmctY29udGFpbmVyIFxuICAgICAgICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0XT1cIml0ZW1UZW1wbGF0ZSB8fCBkZWZhdWx0SXRlbVRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICBbbmdUZW1wbGF0ZU91dGxldENvbnRleHRdPVwieyAkaW1wbGljaXQ6IHgsIGluZGV4OiBpLCBsaXN0OiB0aGlzIH1cIj5cbiAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8L2xpPlxuICAgIDwvdWw+XG48L25nLWNvbnRhaW5lcj5cbjxuZy1jb250YWluZXIgKm5nSWY9XCIhaXRlbXNcIj5cbiAgICA8bmctY29udGFpbmVyIFxuICAgICAgICBbbmdUZW1wbGF0ZU91dGxldF09XCJub0NvbnRlbnRzVGVtcGxhdGUgfHwgZGVmYXVsdE5vQ29udGVudHNUZW1wbGF0ZVwiXG4gICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7ICRpbXBsaWNpdDogdGhpcyB9XCI+XG4gICAgPC9uZy1jb250YWluZXI+XG48L25nLWNvbnRhaW5lcj5cblxuPG5nLXRlbXBsYXRlICNkZWZhdWx0SXRlbVRlbXBsYXRlIGxldC1pdGVtIGxldC1wYXJlbnQ9XCJsaXN0XCI+XG4gICAgPHNwYW4gY2xhc3M9XCJtbC0yXCIgKGNsaWNrKT1cInBhcmVudC5zZWxlY3RJdGVtKGl0ZW0sICdzZWxlY3QnKVwiPnt7aXRlbS5mdWxsTmFtZX19PC9zcGFuPlxuPC9uZy10ZW1wbGF0ZT5cblxuPG5nLXRlbXBsYXRlICNkZWZhdWx0Tm9Db250ZW50c1RlbXBsYXRlIGxldC1pdGVtPlxuICAgIFRoZSBsaXN0IGlzIGVtcHR5IGF0IHRoZSBtb21lbnQhXG48L25nLXRlbXBsYXRlPiJdfQ==