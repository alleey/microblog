import { Inject, Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';
import { FollowingServiceConfigToken } from '../config/config';
import * as i0 from "@angular/core";
import * as i1 from "auth-oidc";
import * as i2 from "@angular/common/http";
;
export class FollowingService {
    constructor(config, authService, httpClient) {
        this.config = config;
        this.authService = authService;
        this.httpClient = httpClient;
        this.onChange = new Subject();
        this.authService.userSubject.subscribe(profile => {
            this.userProfile = profile;
        });
    }
    followedByOne(endpoint, userId, followedById) {
        var _a;
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        const owner = !!userId ? userId : (_a = this.userProfile) === null || _a === void 0 ? void 0 : _a.sub;
        console.info("followed-by : " + followedById);
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}/${owner}/followedBy/${followedById}`)
            .pipe(map(data => {
            return data;
        }));
    }
    followedBy(endpoint, userId, pageable) {
        var _a;
        const page = pageable ? pageable.page : 0;
        const pageSize = (pageable && pageable.limit) ? pageable.limit : this.config.pageSize;
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        const owner = !!userId ? userId : (_a = this.userProfile) === null || _a === void 0 ? void 0 : _a.sub;
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}/${owner}/followedBy`, {
            params: {
                "page": page.toString(),
                "size": pageSize.toString(),
                "sort": "followedByName,asc"
            }
        })
            .pipe(map(data => {
            return data;
        }));
    }
    findFollowedByMatching(endpoint, userId, name, pageable) {
        var _a;
        const page = pageable ? pageable.page : 0;
        const pageSize = (pageable && pageable.limit) ? pageable.limit : this.config.pageSize;
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        const owner = !!userId ? userId : (_a = this.userProfile) === null || _a === void 0 ? void 0 : _a.sub;
        const query = {
            "conditions": [
                { "attribute": "followedByName.fullName", "operator": "like", "value": `%${name}%` }
            ]
        };
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}/${owner}/followedBy/search`, {
            "params": {
                "q": JSON.stringify(query),
                "page": page.toString(),
                "size": pageSize.toString(),
                "sort": "followedByName,asc"
            }
        })
            .pipe(map(data => {
            return data;
        }));
    }
    followingOne(endpoint, userId, followedById) {
        var _a;
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        const owner = !!userId ? userId : (_a = this.userProfile) === null || _a === void 0 ? void 0 : _a.sub;
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}/${owner}/following/${followedById}`)
            .pipe(map(data => {
            return data;
        }));
    }
    following(endpoint, userId, pageable) {
        var _a;
        const page = pageable ? pageable.page : 0;
        const pageSize = (pageable && pageable.limit) ? pageable.limit : this.config.pageSize;
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        const owner = !!userId ? userId : (_a = this.userProfile) === null || _a === void 0 ? void 0 : _a.sub;
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}/${owner}/following`, {
            params: {
                "page": page.toString(),
                "size": pageSize.toString(),
                "sort": "userName,asc"
            }
        })
            .pipe(map(data => {
            return data;
        }));
    }
    findFollowingMatching(endpoint, userId, name, pageable) {
        var _a;
        const page = pageable ? pageable.page : 0;
        const pageSize = (pageable && pageable.limit) ? pageable.limit : this.config.pageSize;
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        const owner = !!userId ? userId : (_a = this.userProfile) === null || _a === void 0 ? void 0 : _a.sub;
        const query = {
            "conditions": [
                { "attribute": "userName.fullName", "operator": "like", "value": `%${name}%` }
            ]
        };
        return this.httpClient
            .get(`${this.config.serviceBaseUrl}/${apiEndpoint}/${owner}/following/search`, {
            "params": {
                "q": JSON.stringify(query),
                "page": page.toString(),
                "size": pageSize.toString(),
                "sort": "userName,asc"
            }
        })
            .pipe(map(data => {
            return data;
        }));
    }
    follow(endpoint, followReq) {
        var _a, _b;
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        followReq.followedById = !!followReq.followedById ? followReq.followedById : (_a = this.userProfile) === null || _a === void 0 ? void 0 : _a.sub;
        followReq.followedByName = !!followReq.followedByName ? followReq.followedByName : (_b = this.userProfile) === null || _b === void 0 ? void 0 : _b.name;
        const owner = followReq.followedById;
        return this.httpClient
            .put(`${this.config.serviceBaseUrl}/${apiEndpoint}/${owner}/following`, followReq)
            .pipe(catchError((error) => {
            return throwError(new Error(error.status));
        }), tap({
            next: x => { this.onChange.next(x); }
        }));
    }
    unfollow(endpoint, userId, userToUnfollow) {
        var _a;
        const apiEndpoint = endpoint ? endpoint : this.config.defaultEndpoint;
        const owner = !!userId ? userId : (_a = this.userProfile) === null || _a === void 0 ? void 0 : _a.sub;
        return this.httpClient
            .delete(`${this.config.serviceBaseUrl}/${apiEndpoint}/${owner}/following/${userToUnfollow}`)
            .pipe(catchError((error) => {
            return throwError(new Error(error.status));
        }), tap({
            next: x => { this.onChange.next(x); }
        }));
    }
}
FollowingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: FollowingService, deps: [{ token: FollowingServiceConfigToken }, { token: i1.OidcAuthService }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
FollowingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: FollowingService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: FollowingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [FollowingServiceConfigToken]
                }] }, { type: i1.OidcAuthService }, { type: i2.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,